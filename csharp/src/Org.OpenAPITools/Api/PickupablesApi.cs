/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPickupablesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve all pickupables
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagedResponseOfProp</returns>
        PagedResponseOfProp PickupablesGet(int operationIndex = 0);

        /// <summary>
        /// Retrieve all pickupables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagedResponseOfProp</returns>
        ApiResponse<PagedResponseOfProp> PickupablesGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get animations for a specific pickupable by GUID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PagedResponseOfAnimations&gt;</returns>
        List<PagedResponseOfAnimations> PickupablesGuidAnimationsGet(string guid, int operationIndex = 0);

        /// <summary>
        /// Get animations for a specific pickupable by GUID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PagedResponseOfAnimations&gt;</returns>
        ApiResponse<List<PagedResponseOfAnimations>> PickupablesGuidAnimationsGetWithHttpInfo(string guid, int operationIndex = 0);
        /// <summary>
        /// Update Pickupable Animations
        /// </summary>
        /// <remarks>
        /// Update animations for a specific Pickupable object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="animation">Dice roll request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PickupablesGuidAnimationsPut(string guid, Animation animation, int operationIndex = 0);

        /// <summary>
        /// Update Pickupable Animations
        /// </summary>
        /// <remarks>
        /// Update animations for a specific Pickupable object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="animation">Dice roll request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PickupablesGuidAnimationsPutWithHttpInfo(string guid, Animation animation, int operationIndex = 0);
        /// <summary>
        /// Update Pickupable Chat
        /// </summary>
        /// <remarks>
        /// Update chat for a pickupable item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PickupablesGuidChatPost(string guid, string body, int operationIndex = 0);

        /// <summary>
        /// Update Pickupable Chat
        /// </summary>
        /// <remarks>
        /// Update chat for a pickupable item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PickupablesGuidChatPostWithHttpInfo(string guid, string body, int operationIndex = 0);
        /// <summary>
        /// Delete Pickupable
        /// </summary>
        /// <remarks>
        /// Delete a pickupable item by its GUID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PickupablesGuidDelete(string guid, int operationIndex = 0);

        /// <summary>
        /// Delete Pickupable
        /// </summary>
        /// <remarks>
        /// Delete a pickupable item by its GUID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PickupablesGuidDeleteWithHttpInfo(string guid, int operationIndex = 0);
        /// <summary>
        /// Focus everyone on the pickupable
        /// </summary>
        /// <remarks>
        /// Focus everyone on the pickupable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PickupablesGuidFocusAllPost(string guid, int operationIndex = 0);

        /// <summary>
        /// Focus everyone on the pickupable
        /// </summary>
        /// <remarks>
        /// Focus everyone on the pickupable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PickupablesGuidFocusAllPostWithHttpInfo(string guid, int operationIndex = 0);
        /// <summary>
        /// Focus on the pickupable
        /// </summary>
        /// <remarks>
        /// Focus on the pickupable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PickupablesGuidFocusPost(string guid, int operationIndex = 0);

        /// <summary>
        /// Focus on the pickupable
        /// </summary>
        /// <remarks>
        /// Focus on the pickupable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PickupablesGuidFocusPostWithHttpInfo(string guid, int operationIndex = 0);
        /// <summary>
        /// Retrieve a specific pickupable by its GUID
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string PickupablesGuidGet(string guid, int operationIndex = 0);

        /// <summary>
        /// Retrieve a specific pickupable by its GUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> PickupablesGuidGetWithHttpInfo(string guid, int operationIndex = 0);
        /// <summary>
        /// Move the pickupable to the target global location
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="vector3">Position to move to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PickupablesGuidMoveToGlobalLocationPost(string guid, Vector3 vector3, int operationIndex = 0);

        /// <summary>
        /// Move the pickupable to the target global location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="vector3">Position to move to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PickupablesGuidMoveToGlobalLocationPostWithHttpInfo(string guid, Vector3 vector3, int operationIndex = 0);
        /// <summary>
        /// Get Pickupable Transform
        /// </summary>
        /// <remarks>
        /// Retrieve the transform of a specific Pickupable object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropTransform</returns>
        PropTransform PickupablesGuidTransformGet(string guid, int operationIndex = 0);

        /// <summary>
        /// Get Pickupable Transform
        /// </summary>
        /// <remarks>
        /// Retrieve the transform of a specific Pickupable object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropTransform</returns>
        ApiResponse<PropTransform> PickupablesGuidTransformGetWithHttpInfo(string guid, int operationIndex = 0);
        /// <summary>
        /// Update Pickupable Transform
        /// </summary>
        /// <remarks>
        /// Update the transform of a specific Pickupable object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="propTransform"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PickupablesGuidTransformPut(string guid, PropTransform propTransform, int operationIndex = 0);

        /// <summary>
        /// Update Pickupable Transform
        /// </summary>
        /// <remarks>
        /// Update the transform of a specific Pickupable object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="propTransform"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PickupablesGuidTransformPutWithHttpInfo(string guid, PropTransform propTransform, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPickupablesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve all pickupables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagedResponseOfProp</returns>
        System.Threading.Tasks.Task<PagedResponseOfProp> PickupablesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve all pickupables
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagedResponseOfProp)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResponseOfProp>> PickupablesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get animations for a specific pickupable by GUID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PagedResponseOfAnimations&gt;</returns>
        System.Threading.Tasks.Task<List<PagedResponseOfAnimations>> PickupablesGuidAnimationsGetAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get animations for a specific pickupable by GUID.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PagedResponseOfAnimations&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PagedResponseOfAnimations>>> PickupablesGuidAnimationsGetWithHttpInfoAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Pickupable Animations
        /// </summary>
        /// <remarks>
        /// Update animations for a specific Pickupable object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="animation">Dice roll request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PickupablesGuidAnimationsPutAsync(string guid, Animation animation, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Pickupable Animations
        /// </summary>
        /// <remarks>
        /// Update animations for a specific Pickupable object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="animation">Dice roll request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PickupablesGuidAnimationsPutWithHttpInfoAsync(string guid, Animation animation, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Pickupable Chat
        /// </summary>
        /// <remarks>
        /// Update chat for a pickupable item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PickupablesGuidChatPostAsync(string guid, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Pickupable Chat
        /// </summary>
        /// <remarks>
        /// Update chat for a pickupable item.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PickupablesGuidChatPostWithHttpInfoAsync(string guid, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Pickupable
        /// </summary>
        /// <remarks>
        /// Delete a pickupable item by its GUID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PickupablesGuidDeleteAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Pickupable
        /// </summary>
        /// <remarks>
        /// Delete a pickupable item by its GUID.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PickupablesGuidDeleteWithHttpInfoAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Focus everyone on the pickupable
        /// </summary>
        /// <remarks>
        /// Focus everyone on the pickupable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PickupablesGuidFocusAllPostAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Focus everyone on the pickupable
        /// </summary>
        /// <remarks>
        /// Focus everyone on the pickupable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PickupablesGuidFocusAllPostWithHttpInfoAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Focus on the pickupable
        /// </summary>
        /// <remarks>
        /// Focus on the pickupable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PickupablesGuidFocusPostAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Focus on the pickupable
        /// </summary>
        /// <remarks>
        /// Focus on the pickupable.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PickupablesGuidFocusPostWithHttpInfoAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a specific pickupable by its GUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> PickupablesGuidGetAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a specific pickupable by its GUID
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> PickupablesGuidGetWithHttpInfoAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Move the pickupable to the target global location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="vector3">Position to move to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PickupablesGuidMoveToGlobalLocationPostAsync(string guid, Vector3 vector3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Move the pickupable to the target global location
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="vector3">Position to move to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PickupablesGuidMoveToGlobalLocationPostWithHttpInfoAsync(string guid, Vector3 vector3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Pickupable Transform
        /// </summary>
        /// <remarks>
        /// Retrieve the transform of a specific Pickupable object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropTransform</returns>
        System.Threading.Tasks.Task<PropTransform> PickupablesGuidTransformGetAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Pickupable Transform
        /// </summary>
        /// <remarks>
        /// Retrieve the transform of a specific Pickupable object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropTransform)</returns>
        System.Threading.Tasks.Task<ApiResponse<PropTransform>> PickupablesGuidTransformGetWithHttpInfoAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update Pickupable Transform
        /// </summary>
        /// <remarks>
        /// Update the transform of a specific Pickupable object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="propTransform"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PickupablesGuidTransformPutAsync(string guid, PropTransform propTransform, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update Pickupable Transform
        /// </summary>
        /// <remarks>
        /// Update the transform of a specific Pickupable object.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="propTransform"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PickupablesGuidTransformPutWithHttpInfoAsync(string guid, PropTransform propTransform, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPickupablesApi : IPickupablesApiSync, IPickupablesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PickupablesApi : IPickupablesApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PickupablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PickupablesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PickupablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PickupablesApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PickupablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PickupablesApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PickupablesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PickupablesApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve all pickupables 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagedResponseOfProp</returns>
        public PagedResponseOfProp PickupablesGet(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PagedResponseOfProp> localVarResponse = PickupablesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all pickupables 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagedResponseOfProp</returns>
        public Org.OpenAPITools.Client.ApiResponse<PagedResponseOfProp> PickupablesGetWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PagedResponseOfProp>("/Pickupables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve all pickupables 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagedResponseOfProp</returns>
        public async System.Threading.Tasks.Task<PagedResponseOfProp> PickupablesGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PagedResponseOfProp> localVarResponse = await PickupablesGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve all pickupables 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagedResponseOfProp)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PagedResponseOfProp>> PickupablesGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PagedResponseOfProp>("/Pickupables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get animations for a specific pickupable by GUID. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PagedResponseOfAnimations&gt;</returns>
        public List<PagedResponseOfAnimations> PickupablesGuidAnimationsGet(string guid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<PagedResponseOfAnimations>> localVarResponse = PickupablesGuidAnimationsGetWithHttpInfo(guid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get animations for a specific pickupable by GUID. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PagedResponseOfAnimations&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<PagedResponseOfAnimations>> PickupablesGuidAnimationsGetWithHttpInfo(string guid, int operationIndex = 0)
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidAnimationsGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidAnimationsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PagedResponseOfAnimations>>("/Pickupables/{guid}/Animations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidAnimationsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get animations for a specific pickupable by GUID. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PagedResponseOfAnimations&gt;</returns>
        public async System.Threading.Tasks.Task<List<PagedResponseOfAnimations>> PickupablesGuidAnimationsGetAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<PagedResponseOfAnimations>> localVarResponse = await PickupablesGuidAnimationsGetWithHttpInfoAsync(guid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get animations for a specific pickupable by GUID. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PagedResponseOfAnimations&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<PagedResponseOfAnimations>>> PickupablesGuidAnimationsGetWithHttpInfoAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidAnimationsGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidAnimationsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PagedResponseOfAnimations>>("/Pickupables/{guid}/Animations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidAnimationsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Pickupable Animations Update animations for a specific Pickupable object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="animation">Dice roll request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PickupablesGuidAnimationsPut(string guid, Animation animation, int operationIndex = 0)
        {
            PickupablesGuidAnimationsPutWithHttpInfo(guid, animation);
        }

        /// <summary>
        /// Update Pickupable Animations Update animations for a specific Pickupable object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="animation">Dice roll request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PickupablesGuidAnimationsPutWithHttpInfo(string guid, Animation animation, int operationIndex = 0)
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidAnimationsPut");
            }

            // verify the required parameter 'animation' is set
            if (animation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'animation' when calling PickupablesApi->PickupablesGuidAnimationsPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = animation;

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidAnimationsPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/Pickupables/{guid}/Animations", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidAnimationsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Pickupable Animations Update animations for a specific Pickupable object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="animation">Dice roll request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PickupablesGuidAnimationsPutAsync(string guid, Animation animation, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PickupablesGuidAnimationsPutWithHttpInfoAsync(guid, animation, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Pickupable Animations Update animations for a specific Pickupable object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="animation">Dice roll request</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PickupablesGuidAnimationsPutWithHttpInfoAsync(string guid, Animation animation, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidAnimationsPut");
            }

            // verify the required parameter 'animation' is set
            if (animation == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'animation' when calling PickupablesApi->PickupablesGuidAnimationsPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = animation;

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidAnimationsPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/Pickupables/{guid}/Animations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidAnimationsPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Pickupable Chat Update chat for a pickupable item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PickupablesGuidChatPost(string guid, string body, int operationIndex = 0)
        {
            PickupablesGuidChatPostWithHttpInfo(guid, body);
        }

        /// <summary>
        /// Update Pickupable Chat Update chat for a pickupable item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PickupablesGuidChatPostWithHttpInfo(string guid, string body, int operationIndex = 0)
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidChatPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling PickupablesApi->PickupablesGuidChatPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/text"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidChatPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Pickupables/{guid}/Chat", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidChatPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Pickupable Chat Update chat for a pickupable item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PickupablesGuidChatPostAsync(string guid, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PickupablesGuidChatPostWithHttpInfoAsync(guid, body, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Pickupable Chat Update chat for a pickupable item.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="body"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PickupablesGuidChatPostWithHttpInfoAsync(string guid, string body, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidChatPost");
            }

            // verify the required parameter 'body' is set
            if (body == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'body' when calling PickupablesApi->PickupablesGuidChatPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/text"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidChatPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Pickupables/{guid}/Chat", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidChatPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Pickupable Delete a pickupable item by its GUID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PickupablesGuidDelete(string guid, int operationIndex = 0)
        {
            PickupablesGuidDeleteWithHttpInfo(guid);
        }

        /// <summary>
        /// Delete Pickupable Delete a pickupable item by its GUID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PickupablesGuidDeleteWithHttpInfo(string guid, int operationIndex = 0)
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidDelete");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/Pickupables/{guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Pickupable Delete a pickupable item by its GUID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PickupablesGuidDeleteAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PickupablesGuidDeleteWithHttpInfoAsync(guid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete Pickupable Delete a pickupable item by its GUID.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PickupablesGuidDeleteWithHttpInfoAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidDelete");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/Pickupables/{guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Focus everyone on the pickupable Focus everyone on the pickupable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PickupablesGuidFocusAllPost(string guid, int operationIndex = 0)
        {
            PickupablesGuidFocusAllPostWithHttpInfo(guid);
        }

        /// <summary>
        /// Focus everyone on the pickupable Focus everyone on the pickupable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PickupablesGuidFocusAllPostWithHttpInfo(string guid, int operationIndex = 0)
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidFocusAllPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidFocusAllPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Pickupables/{guid}/FocusAll", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidFocusAllPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Focus everyone on the pickupable Focus everyone on the pickupable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PickupablesGuidFocusAllPostAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PickupablesGuidFocusAllPostWithHttpInfoAsync(guid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Focus everyone on the pickupable Focus everyone on the pickupable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PickupablesGuidFocusAllPostWithHttpInfoAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidFocusAllPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidFocusAllPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Pickupables/{guid}/FocusAll", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidFocusAllPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Focus on the pickupable Focus on the pickupable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PickupablesGuidFocusPost(string guid, int operationIndex = 0)
        {
            PickupablesGuidFocusPostWithHttpInfo(guid);
        }

        /// <summary>
        /// Focus on the pickupable Focus on the pickupable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PickupablesGuidFocusPostWithHttpInfo(string guid, int operationIndex = 0)
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidFocusPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidFocusPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Pickupables/{guid}/Focus", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidFocusPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Focus on the pickupable Focus on the pickupable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PickupablesGuidFocusPostAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PickupablesGuidFocusPostWithHttpInfoAsync(guid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Focus on the pickupable Focus on the pickupable.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PickupablesGuidFocusPostWithHttpInfoAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidFocusPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidFocusPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Pickupables/{guid}/Focus", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidFocusPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a specific pickupable by its GUID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string PickupablesGuidGet(string guid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = PickupablesGuidGetWithHttpInfo(guid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a specific pickupable by its GUID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> PickupablesGuidGetWithHttpInfo(string guid, int operationIndex = 0)
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/Pickupables/{guid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a specific pickupable by its GUID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> PickupablesGuidGetAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await PickupablesGuidGetWithHttpInfoAsync(guid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a specific pickupable by its GUID 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The GUID of the pickupable</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> PickupablesGuidGetWithHttpInfoAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/Pickupables/{guid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move the pickupable to the target global location 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="vector3">Position to move to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PickupablesGuidMoveToGlobalLocationPost(string guid, Vector3 vector3, int operationIndex = 0)
        {
            PickupablesGuidMoveToGlobalLocationPostWithHttpInfo(guid, vector3);
        }

        /// <summary>
        /// Move the pickupable to the target global location 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="vector3">Position to move to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PickupablesGuidMoveToGlobalLocationPostWithHttpInfo(string guid, Vector3 vector3, int operationIndex = 0)
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidMoveToGlobalLocationPost");
            }

            // verify the required parameter 'vector3' is set
            if (vector3 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'vector3' when calling PickupablesApi->PickupablesGuidMoveToGlobalLocationPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = vector3;

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidMoveToGlobalLocationPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/Pickupables/{guid}/MoveToGlobalLocation", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidMoveToGlobalLocationPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Move the pickupable to the target global location 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="vector3">Position to move to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PickupablesGuidMoveToGlobalLocationPostAsync(string guid, Vector3 vector3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PickupablesGuidMoveToGlobalLocationPostWithHttpInfoAsync(guid, vector3, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Move the pickupable to the target global location 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid"></param>
        /// <param name="vector3">Position to move to</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PickupablesGuidMoveToGlobalLocationPostWithHttpInfoAsync(string guid, Vector3 vector3, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidMoveToGlobalLocationPost");
            }

            // verify the required parameter 'vector3' is set
            if (vector3 == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'vector3' when calling PickupablesApi->PickupablesGuidMoveToGlobalLocationPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = vector3;

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidMoveToGlobalLocationPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/Pickupables/{guid}/MoveToGlobalLocation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidMoveToGlobalLocationPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pickupable Transform Retrieve the transform of a specific Pickupable object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PropTransform</returns>
        public PropTransform PickupablesGuidTransformGet(string guid, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PropTransform> localVarResponse = PickupablesGuidTransformGetWithHttpInfo(guid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pickupable Transform Retrieve the transform of a specific Pickupable object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PropTransform</returns>
        public Org.OpenAPITools.Client.ApiResponse<PropTransform> PickupablesGuidTransformGetWithHttpInfo(string guid, int operationIndex = 0)
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidTransformGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidTransformGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PropTransform>("/Pickupables/{guid}/Transform", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidTransformGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Pickupable Transform Retrieve the transform of a specific Pickupable object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PropTransform</returns>
        public async System.Threading.Tasks.Task<PropTransform> PickupablesGuidTransformGetAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PropTransform> localVarResponse = await PickupablesGuidTransformGetWithHttpInfoAsync(guid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Pickupable Transform Retrieve the transform of a specific Pickupable object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PropTransform)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PropTransform>> PickupablesGuidTransformGetWithHttpInfoAsync(string guid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidTransformGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidTransformGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PropTransform>("/Pickupables/{guid}/Transform", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidTransformGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Pickupable Transform Update the transform of a specific Pickupable object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="propTransform"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PickupablesGuidTransformPut(string guid, PropTransform propTransform, int operationIndex = 0)
        {
            PickupablesGuidTransformPutWithHttpInfo(guid, propTransform);
        }

        /// <summary>
        /// Update Pickupable Transform Update the transform of a specific Pickupable object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="propTransform"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> PickupablesGuidTransformPutWithHttpInfo(string guid, PropTransform propTransform, int operationIndex = 0)
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidTransformPut");
            }

            // verify the required parameter 'propTransform' is set
            if (propTransform == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'propTransform' when calling PickupablesApi->PickupablesGuidTransformPut");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = propTransform;

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidTransformPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/Pickupables/{guid}/Transform", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidTransformPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update Pickupable Transform Update the transform of a specific Pickupable object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="propTransform"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PickupablesGuidTransformPutAsync(string guid, PropTransform propTransform, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await PickupablesGuidTransformPutWithHttpInfoAsync(guid, propTransform, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Update Pickupable Transform Update the transform of a specific Pickupable object.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="guid">The unique identifier of the Pickupable.</param>
        /// <param name="propTransform"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> PickupablesGuidTransformPutWithHttpInfoAsync(string guid, PropTransform propTransform, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'guid' is set
            if (guid == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'guid' when calling PickupablesApi->PickupablesGuidTransformPut");
            }

            // verify the required parameter 'propTransform' is set
            if (propTransform == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'propTransform' when calling PickupablesApi->PickupablesGuidTransformPut");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("guid", Org.OpenAPITools.Client.ClientUtils.ParameterToString(guid)); // path parameter
            localVarRequestOptions.Data = propTransform;

            localVarRequestOptions.Operation = "PickupablesApi.PickupablesGuidTransformPut";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/Pickupables/{guid}/Transform", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PickupablesGuidTransformPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
