/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrentCampaignMapsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of map names
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagedResponseOfString</returns>
        PagedResponseOfString CurrentCampaignMapsGet(int operationIndex = 0);

        /// <summary>
        /// Get a list of map names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagedResponseOfString</returns>
        ApiResponse<PagedResponseOfString> CurrentCampaignMapsGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Retrieve file path of the given map
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to get the file path of</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string CurrentCampaignMapsMapNameFilePathGet(string mapName, int operationIndex = 0);

        /// <summary>
        /// Retrieve file path of the given map
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to get the file path of</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CurrentCampaignMapsMapNameFilePathGetWithHttpInfo(string mapName, int operationIndex = 0);
        /// <summary>
        /// Get map details by name
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MapDataResponse</returns>
        MapDataResponse CurrentCampaignMapsMapNameGet(string mapName, int operationIndex = 0);

        /// <summary>
        /// Get map details by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MapDataResponse</returns>
        ApiResponse<MapDataResponse> CurrentCampaignMapsMapNameGetWithHttpInfo(string mapName, int operationIndex = 0);
        /// <summary>
        /// Load a map into memory
        /// </summary>
        /// <remarks>
        /// Load a map if it exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to load in to memory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CurrentCampaignMapsMapNameLoadIntoMemoryPost(string mapName, int operationIndex = 0);

        /// <summary>
        /// Load a map into memory
        /// </summary>
        /// <remarks>
        /// Load a map if it exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to load in to memory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CurrentCampaignMapsMapNameLoadIntoMemoryPostWithHttpInfo(string mapName, int operationIndex = 0);
        /// <summary>
        /// Load a map
        /// </summary>
        /// <remarks>
        /// Load a map if it exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CurrentCampaignMapsMapNameOpenPost(string mapName, int operationIndex = 0);

        /// <summary>
        /// Load a map
        /// </summary>
        /// <remarks>
        /// Load a map if it exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CurrentCampaignMapsMapNameOpenPostWithHttpInfo(string mapName, int operationIndex = 0);
        /// <summary>
        /// Get pickupables for a specific map.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PagedResponseOfProp&gt;</returns>
        List<PagedResponseOfProp> CurrentCampaignMapsMapNamePickupablesGet(string mapName, int operationIndex = 0);

        /// <summary>
        /// Get pickupables for a specific map.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PagedResponseOfProp&gt;</returns>
        ApiResponse<List<PagedResponseOfProp>> CurrentCampaignMapsMapNamePickupablesGetWithHttpInfo(string mapName, int operationIndex = 0);
        /// <summary>
        /// Create Pickupables
        /// </summary>
        /// <remarks>
        /// Create new pickupable items for a specific map.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map where the pickupables should be created.</param>
        /// <param name="prop">The collection of pickupable items to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Prop&gt;</returns>
        List<Prop> CurrentCampaignMapsMapNamePickupablesPost(string mapName, List<Prop> prop, int operationIndex = 0);

        /// <summary>
        /// Create Pickupables
        /// </summary>
        /// <remarks>
        /// Create new pickupable items for a specific map.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map where the pickupables should be created.</param>
        /// <param name="prop">The collection of pickupable items to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Prop&gt;</returns>
        ApiResponse<List<Prop>> CurrentCampaignMapsMapNamePickupablesPostWithHttpInfo(string mapName, List<Prop> prop, int operationIndex = 0);
        /// <summary>
        /// Sends all players to a map
        /// </summary>
        /// <remarks>
        /// Sends all players to a map if it exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void CurrentCampaignMapsMapNameSendAllPlayersPost(string mapName, int operationIndex = 0);

        /// <summary>
        /// Sends all players to a map
        /// </summary>
        /// <remarks>
        /// Sends all players to a map if it exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CurrentCampaignMapsMapNameSendAllPlayersPostWithHttpInfo(string mapName, int operationIndex = 0);
        /// <summary>
        /// Get terrain data for a specific map.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object CurrentCampaignMapsMapNameTerrainDataGet(string mapName, int operationIndex = 0);

        /// <summary>
        /// Get terrain data for a specific map.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> CurrentCampaignMapsMapNameTerrainDataGetWithHttpInfo(string mapName, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrentCampaignMapsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of map names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagedResponseOfString</returns>
        System.Threading.Tasks.Task<PagedResponseOfString> CurrentCampaignMapsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a list of map names
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagedResponseOfString)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedResponseOfString>> CurrentCampaignMapsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve file path of the given map
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to get the file path of</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CurrentCampaignMapsMapNameFilePathGetAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve file path of the given map
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to get the file path of</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CurrentCampaignMapsMapNameFilePathGetWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get map details by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MapDataResponse</returns>
        System.Threading.Tasks.Task<MapDataResponse> CurrentCampaignMapsMapNameGetAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get map details by name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MapDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MapDataResponse>> CurrentCampaignMapsMapNameGetWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load a map into memory
        /// </summary>
        /// <remarks>
        /// Load a map if it exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to load in to memory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CurrentCampaignMapsMapNameLoadIntoMemoryPostAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load a map into memory
        /// </summary>
        /// <remarks>
        /// Load a map if it exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to load in to memory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CurrentCampaignMapsMapNameLoadIntoMemoryPostWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Load a map
        /// </summary>
        /// <remarks>
        /// Load a map if it exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CurrentCampaignMapsMapNameOpenPostAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Load a map
        /// </summary>
        /// <remarks>
        /// Load a map if it exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CurrentCampaignMapsMapNameOpenPostWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get pickupables for a specific map.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PagedResponseOfProp&gt;</returns>
        System.Threading.Tasks.Task<List<PagedResponseOfProp>> CurrentCampaignMapsMapNamePickupablesGetAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get pickupables for a specific map.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PagedResponseOfProp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PagedResponseOfProp>>> CurrentCampaignMapsMapNamePickupablesGetWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Pickupables
        /// </summary>
        /// <remarks>
        /// Create new pickupable items for a specific map.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map where the pickupables should be created.</param>
        /// <param name="prop">The collection of pickupable items to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Prop&gt;</returns>
        System.Threading.Tasks.Task<List<Prop>> CurrentCampaignMapsMapNamePickupablesPostAsync(string mapName, List<Prop> prop, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Pickupables
        /// </summary>
        /// <remarks>
        /// Create new pickupable items for a specific map.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map where the pickupables should be created.</param>
        /// <param name="prop">The collection of pickupable items to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Prop&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Prop>>> CurrentCampaignMapsMapNamePickupablesPostWithHttpInfoAsync(string mapName, List<Prop> prop, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sends all players to a map
        /// </summary>
        /// <remarks>
        /// Sends all players to a map if it exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CurrentCampaignMapsMapNameSendAllPlayersPostAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sends all players to a map
        /// </summary>
        /// <remarks>
        /// Sends all players to a map if it exists
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CurrentCampaignMapsMapNameSendAllPlayersPostWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get terrain data for a specific map.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> CurrentCampaignMapsMapNameTerrainDataGetAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get terrain data for a specific map.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CurrentCampaignMapsMapNameTerrainDataGetWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICurrentCampaignMapsApi : ICurrentCampaignMapsApiSync, ICurrentCampaignMapsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CurrentCampaignMapsApi : ICurrentCampaignMapsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentCampaignMapsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrentCampaignMapsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentCampaignMapsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CurrentCampaignMapsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentCampaignMapsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CurrentCampaignMapsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentCampaignMapsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CurrentCampaignMapsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a list of map names 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PagedResponseOfString</returns>
        public PagedResponseOfString CurrentCampaignMapsGet(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<PagedResponseOfString> localVarResponse = CurrentCampaignMapsGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of map names 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PagedResponseOfString</returns>
        public Org.OpenAPITools.Client.ApiResponse<PagedResponseOfString> CurrentCampaignMapsGetWithHttpInfo(int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<PagedResponseOfString>("/CurrentCampaign/Maps", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a list of map names 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PagedResponseOfString</returns>
        public async System.Threading.Tasks.Task<PagedResponseOfString> CurrentCampaignMapsGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<PagedResponseOfString> localVarResponse = await CurrentCampaignMapsGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of map names 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PagedResponseOfString)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PagedResponseOfString>> CurrentCampaignMapsGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PagedResponseOfString>("/CurrentCampaign/Maps", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve file path of the given map 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to get the file path of</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string CurrentCampaignMapsMapNameFilePathGet(string mapName, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = CurrentCampaignMapsMapNameFilePathGetWithHttpInfo(mapName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve file path of the given map 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to get the file path of</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Org.OpenAPITools.Client.ApiResponse<string> CurrentCampaignMapsMapNameFilePathGetWithHttpInfo(string mapName, int operationIndex = 0)
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNameFilePathGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNameFilePathGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/CurrentCampaign/Maps/{mapName}/FilePath", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNameFilePathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve file path of the given map 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to get the file path of</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CurrentCampaignMapsMapNameFilePathGetAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<string> localVarResponse = await CurrentCampaignMapsMapNameFilePathGetWithHttpInfoAsync(mapName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve file path of the given map 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to get the file path of</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<string>> CurrentCampaignMapsMapNameFilePathGetWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNameFilePathGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNameFilePathGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/CurrentCampaign/Maps/{mapName}/FilePath", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNameFilePathGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get map details by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>MapDataResponse</returns>
        public MapDataResponse CurrentCampaignMapsMapNameGet(string mapName, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<MapDataResponse> localVarResponse = CurrentCampaignMapsMapNameGetWithHttpInfo(mapName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get map details by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of MapDataResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<MapDataResponse> CurrentCampaignMapsMapNameGetWithHttpInfo(string mapName, int operationIndex = 0)
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNameGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<MapDataResponse>("/CurrentCampaign/Maps/{mapName}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get map details by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of MapDataResponse</returns>
        public async System.Threading.Tasks.Task<MapDataResponse> CurrentCampaignMapsMapNameGetAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<MapDataResponse> localVarResponse = await CurrentCampaignMapsMapNameGetWithHttpInfoAsync(mapName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get map details by name 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (MapDataResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<MapDataResponse>> CurrentCampaignMapsMapNameGetWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNameGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNameGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<MapDataResponse>("/CurrentCampaign/Maps/{mapName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNameGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load a map into memory Load a map if it exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to load in to memory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CurrentCampaignMapsMapNameLoadIntoMemoryPost(string mapName, int operationIndex = 0)
        {
            CurrentCampaignMapsMapNameLoadIntoMemoryPostWithHttpInfo(mapName);
        }

        /// <summary>
        /// Load a map into memory Load a map if it exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to load in to memory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> CurrentCampaignMapsMapNameLoadIntoMemoryPostWithHttpInfo(string mapName, int operationIndex = 0)
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNameLoadIntoMemoryPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNameLoadIntoMemoryPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/CurrentCampaign/Maps/{mapName}/LoadIntoMemory", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNameLoadIntoMemoryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load a map into memory Load a map if it exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to load in to memory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CurrentCampaignMapsMapNameLoadIntoMemoryPostAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CurrentCampaignMapsMapNameLoadIntoMemoryPostWithHttpInfoAsync(mapName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Load a map into memory Load a map if it exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to load in to memory</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> CurrentCampaignMapsMapNameLoadIntoMemoryPostWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNameLoadIntoMemoryPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNameLoadIntoMemoryPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/CurrentCampaign/Maps/{mapName}/LoadIntoMemory", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNameLoadIntoMemoryPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load a map Load a map if it exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CurrentCampaignMapsMapNameOpenPost(string mapName, int operationIndex = 0)
        {
            CurrentCampaignMapsMapNameOpenPostWithHttpInfo(mapName);
        }

        /// <summary>
        /// Load a map Load a map if it exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> CurrentCampaignMapsMapNameOpenPostWithHttpInfo(string mapName, int operationIndex = 0)
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNameOpenPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNameOpenPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/CurrentCampaign/Maps/{mapName}/Open", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNameOpenPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Load a map Load a map if it exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CurrentCampaignMapsMapNameOpenPostAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CurrentCampaignMapsMapNameOpenPostWithHttpInfoAsync(mapName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Load a map Load a map if it exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> CurrentCampaignMapsMapNameOpenPostWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNameOpenPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNameOpenPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/CurrentCampaign/Maps/{mapName}/Open", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNameOpenPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get pickupables for a specific map. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;PagedResponseOfProp&gt;</returns>
        public List<PagedResponseOfProp> CurrentCampaignMapsMapNamePickupablesGet(string mapName, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<PagedResponseOfProp>> localVarResponse = CurrentCampaignMapsMapNamePickupablesGetWithHttpInfo(mapName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get pickupables for a specific map. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;PagedResponseOfProp&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<PagedResponseOfProp>> CurrentCampaignMapsMapNamePickupablesGetWithHttpInfo(string mapName, int operationIndex = 0)
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNamePickupablesGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNamePickupablesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<PagedResponseOfProp>>("/CurrentCampaign/Maps/{mapName}/Pickupables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNamePickupablesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get pickupables for a specific map. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;PagedResponseOfProp&gt;</returns>
        public async System.Threading.Tasks.Task<List<PagedResponseOfProp>> CurrentCampaignMapsMapNamePickupablesGetAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<PagedResponseOfProp>> localVarResponse = await CurrentCampaignMapsMapNamePickupablesGetWithHttpInfoAsync(mapName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get pickupables for a specific map. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;PagedResponseOfProp&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<PagedResponseOfProp>>> CurrentCampaignMapsMapNamePickupablesGetWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNamePickupablesGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNamePickupablesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<PagedResponseOfProp>>("/CurrentCampaign/Maps/{mapName}/Pickupables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNamePickupablesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Pickupables Create new pickupable items for a specific map.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map where the pickupables should be created.</param>
        /// <param name="prop">The collection of pickupable items to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;Prop&gt;</returns>
        public List<Prop> CurrentCampaignMapsMapNamePickupablesPost(string mapName, List<Prop> prop, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<List<Prop>> localVarResponse = CurrentCampaignMapsMapNamePickupablesPostWithHttpInfo(mapName, prop);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Pickupables Create new pickupable items for a specific map.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map where the pickupables should be created.</param>
        /// <param name="prop">The collection of pickupable items to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;Prop&gt;</returns>
        public Org.OpenAPITools.Client.ApiResponse<List<Prop>> CurrentCampaignMapsMapNamePickupablesPostWithHttpInfo(string mapName, List<Prop> prop, int operationIndex = 0)
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNamePickupablesPost");
            }

            // verify the required parameter 'prop' is set
            if (prop == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'prop' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNamePickupablesPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter
            localVarRequestOptions.Data = prop;

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNamePickupablesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<List<Prop>>("/CurrentCampaign/Maps/{mapName}/Pickupables", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNamePickupablesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Pickupables Create new pickupable items for a specific map.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map where the pickupables should be created.</param>
        /// <param name="prop">The collection of pickupable items to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;Prop&gt;</returns>
        public async System.Threading.Tasks.Task<List<Prop>> CurrentCampaignMapsMapNamePickupablesPostAsync(string mapName, List<Prop> prop, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<List<Prop>> localVarResponse = await CurrentCampaignMapsMapNamePickupablesPostWithHttpInfoAsync(mapName, prop, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Pickupables Create new pickupable items for a specific map.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map where the pickupables should be created.</param>
        /// <param name="prop">The collection of pickupable items to create.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;Prop&gt;)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<List<Prop>>> CurrentCampaignMapsMapNamePickupablesPostWithHttpInfoAsync(string mapName, List<Prop> prop, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNamePickupablesPost");
            }

            // verify the required parameter 'prop' is set
            if (prop == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'prop' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNamePickupablesPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter
            localVarRequestOptions.Data = prop;

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNamePickupablesPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<Prop>>("/CurrentCampaign/Maps/{mapName}/Pickupables", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNamePickupablesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends all players to a map Sends all players to a map if it exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void CurrentCampaignMapsMapNameSendAllPlayersPost(string mapName, int operationIndex = 0)
        {
            CurrentCampaignMapsMapNameSendAllPlayersPostWithHttpInfo(mapName);
        }

        /// <summary>
        /// Sends all players to a map Sends all players to a map if it exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> CurrentCampaignMapsMapNameSendAllPlayersPostWithHttpInfo(string mapName, int operationIndex = 0)
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNameSendAllPlayersPost");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNameSendAllPlayersPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/CurrentCampaign/Maps/{mapName}/SendAllPlayers", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNameSendAllPlayersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sends all players to a map Sends all players to a map if it exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CurrentCampaignMapsMapNameSendAllPlayersPostAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await CurrentCampaignMapsMapNameSendAllPlayersPostWithHttpInfoAsync(mapName, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Sends all players to a map Sends all players to a map if it exists
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName">The name of the map to retrieve</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> CurrentCampaignMapsMapNameSendAllPlayersPostWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNameSendAllPlayersPost");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNameSendAllPlayersPost";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/CurrentCampaign/Maps/{mapName}/SendAllPlayers", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNameSendAllPlayersPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get terrain data for a specific map. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object CurrentCampaignMapsMapNameTerrainDataGet(string mapName, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = CurrentCampaignMapsMapNameTerrainDataGetWithHttpInfo(mapName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get terrain data for a specific map. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public Org.OpenAPITools.Client.ApiResponse<Object> CurrentCampaignMapsMapNameTerrainDataGetWithHttpInfo(string mapName, int operationIndex = 0)
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNameTerrainDataGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNameTerrainDataGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/CurrentCampaign/Maps/{mapName}/TerrainData", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNameTerrainDataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get terrain data for a specific map. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> CurrentCampaignMapsMapNameTerrainDataGetAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<Object> localVarResponse = await CurrentCampaignMapsMapNameTerrainDataGetWithHttpInfoAsync(mapName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get terrain data for a specific map. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mapName"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<Object>> CurrentCampaignMapsMapNameTerrainDataGetWithHttpInfoAsync(string mapName, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'mapName' is set
            if (mapName == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'mapName' when calling CurrentCampaignMapsApi->CurrentCampaignMapsMapNameTerrainDataGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/plain"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("mapName", Org.OpenAPITools.Client.ClientUtils.ParameterToString(mapName)); // path parameter

            localVarRequestOptions.Operation = "CurrentCampaignMapsApi.CurrentCampaignMapsMapNameTerrainDataGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/CurrentCampaign/Maps/{mapName}/TerrainData", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CurrentCampaignMapsMapNameTerrainDataGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
