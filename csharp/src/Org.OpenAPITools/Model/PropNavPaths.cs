/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A class for storing navigation paths for a Prop
    /// </summary>
    [DataContract(Name = "PropNavPaths")]
    public partial class PropNavPaths : IEquatable<PropNavPaths>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropNavPaths" /> class.
        /// </summary>
        /// <param name="varVersion">The version of the PropNavPaths (default to 1).</param>
        /// <param name="patrolPoints">A list of patrol points represented as Vector3 objects.</param>
        public PropNavPaths(int varVersion = 1, List<Vector3> patrolPoints = default(List<Vector3>))
        {
            this.VarVersion = varVersion;
            this.PatrolPoints = patrolPoints;
        }

        /// <summary>
        /// The version of the PropNavPaths
        /// </summary>
        /// <value>The version of the PropNavPaths</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// A list of patrol points represented as Vector3 objects
        /// </summary>
        /// <value>A list of patrol points represented as Vector3 objects</value>
        [DataMember(Name = "patrolPoints", EmitDefaultValue = false)]
        public List<Vector3> PatrolPoints { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropNavPaths {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  PatrolPoints: ").Append(PatrolPoints).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropNavPaths);
        }

        /// <summary>
        /// Returns true if PropNavPaths instances are equal
        /// </summary>
        /// <param name="input">Instance of PropNavPaths to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropNavPaths input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                ) && 
                (
                    this.PatrolPoints == input.PatrolPoints ||
                    this.PatrolPoints != null &&
                    input.PatrolPoints != null &&
                    this.PatrolPoints.SequenceEqual(input.PatrolPoints)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                if (this.PatrolPoints != null)
                {
                    hashCode = (hashCode * 59) + this.PatrolPoints.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
