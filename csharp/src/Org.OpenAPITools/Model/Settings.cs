/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Settings
    /// </summary>
    [DataContract(Name = "Settings")]
    public partial class Settings : IEquatable<Settings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Settings" /> class.
        /// </summary>
        /// <param name="showGrid">Whether to show the grid.</param>
        /// <param name="gridSize">Grid size.</param>
        /// <param name="lineWidth">Line width.</param>
        /// <param name="gridColor">gridColor.</param>
        /// <param name="gridType">Grid type.</param>
        /// <param name="unitMultiplier">Unit multiplier.</param>
        /// <param name="roundRulers">Whether to round rulers.</param>
        public Settings(bool showGrid = default(bool), decimal gridSize = default(decimal), decimal lineWidth = default(decimal), Color gridColor = default(Color), int gridType = default(int), decimal unitMultiplier = default(decimal), bool roundRulers = default(bool))
        {
            this.ShowGrid = showGrid;
            this.GridSize = gridSize;
            this.LineWidth = lineWidth;
            this.GridColor = gridColor;
            this.GridType = gridType;
            this.UnitMultiplier = unitMultiplier;
            this.RoundRulers = roundRulers;
        }

        /// <summary>
        /// Whether to show the grid
        /// </summary>
        /// <value>Whether to show the grid</value>
        [DataMember(Name = "showGrid", EmitDefaultValue = true)]
        public bool ShowGrid { get; set; }

        /// <summary>
        /// Grid size
        /// </summary>
        /// <value>Grid size</value>
        [DataMember(Name = "gridSize", EmitDefaultValue = false)]
        public decimal GridSize { get; set; }

        /// <summary>
        /// Line width
        /// </summary>
        /// <value>Line width</value>
        [DataMember(Name = "lineWidth", EmitDefaultValue = false)]
        public decimal LineWidth { get; set; }

        /// <summary>
        /// Gets or Sets GridColor
        /// </summary>
        [DataMember(Name = "gridColor", EmitDefaultValue = false)]
        public Color GridColor { get; set; }

        /// <summary>
        /// Grid type
        /// </summary>
        /// <value>Grid type</value>
        [DataMember(Name = "gridType", EmitDefaultValue = false)]
        public int GridType { get; set; }

        /// <summary>
        /// Unit multiplier
        /// </summary>
        /// <value>Unit multiplier</value>
        [DataMember(Name = "unitMultiplier", EmitDefaultValue = false)]
        public decimal UnitMultiplier { get; set; }

        /// <summary>
        /// Whether to round rulers
        /// </summary>
        /// <value>Whether to round rulers</value>
        [DataMember(Name = "roundRulers", EmitDefaultValue = true)]
        public bool RoundRulers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Settings {\n");
            sb.Append("  ShowGrid: ").Append(ShowGrid).Append("\n");
            sb.Append("  GridSize: ").Append(GridSize).Append("\n");
            sb.Append("  LineWidth: ").Append(LineWidth).Append("\n");
            sb.Append("  GridColor: ").Append(GridColor).Append("\n");
            sb.Append("  GridType: ").Append(GridType).Append("\n");
            sb.Append("  UnitMultiplier: ").Append(UnitMultiplier).Append("\n");
            sb.Append("  RoundRulers: ").Append(RoundRulers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Settings);
        }

        /// <summary>
        /// Returns true if Settings instances are equal
        /// </summary>
        /// <param name="input">Instance of Settings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Settings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ShowGrid == input.ShowGrid ||
                    this.ShowGrid.Equals(input.ShowGrid)
                ) && 
                (
                    this.GridSize == input.GridSize ||
                    this.GridSize.Equals(input.GridSize)
                ) && 
                (
                    this.LineWidth == input.LineWidth ||
                    this.LineWidth.Equals(input.LineWidth)
                ) && 
                (
                    this.GridColor == input.GridColor ||
                    (this.GridColor != null &&
                    this.GridColor.Equals(input.GridColor))
                ) && 
                (
                    this.GridType == input.GridType ||
                    this.GridType.Equals(input.GridType)
                ) && 
                (
                    this.UnitMultiplier == input.UnitMultiplier ||
                    this.UnitMultiplier.Equals(input.UnitMultiplier)
                ) && 
                (
                    this.RoundRulers == input.RoundRulers ||
                    this.RoundRulers.Equals(input.RoundRulers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ShowGrid.GetHashCode();
                hashCode = (hashCode * 59) + this.GridSize.GetHashCode();
                hashCode = (hashCode * 59) + this.LineWidth.GetHashCode();
                if (this.GridColor != null)
                {
                    hashCode = (hashCode * 59) + this.GridColor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.GridType.GetHashCode();
                hashCode = (hashCode * 59) + this.UnitMultiplier.GetHashCode();
                hashCode = (hashCode * 59) + this.RoundRulers.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
