/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PostProcessing
    /// </summary>
    [DataContract(Name = "PostProcessing")]
    public partial class PostProcessing : IEquatable<PostProcessing>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostProcessing" /> class.
        /// </summary>
        /// <param name="tiltShiftBlurAmount">Tilt-shift blur amount.</param>
        /// <param name="edgeDetectionEnabled">Whether edge detection is enabled.</param>
        /// <param name="edgeDetectionColor">edgeDetectionColor.</param>
        /// <param name="ditheringThreshold">Dithering threshold.</param>
        /// <param name="tubeDistortionStrength">Tube distortion strength.</param>
        /// <param name="pixelizationResolution">Pixelization resolution.</param>
        /// <param name="colorSplitStrength">Color split strength.</param>
        /// <param name="waterRipplesStrength">Water ripples strength.</param>
        /// <param name="waterRipplesSpeed">Water ripples speed.</param>
        /// <param name="sketchEnabled">Whether sketch is enabled.</param>
        /// <param name="radialBlurAmount">Radial blur amount.</param>
        /// <param name="bloomThreshhold">Bloom threshold.</param>
        /// <param name="bloomIntensity">Bloom intensity.</param>
        /// <param name="vignetteIntensity">Vignette intensity.</param>
        /// <param name="vignetteColor">vignetteColor.</param>
        /// <param name="postExposure">Post-exposure.</param>
        /// <param name="saturation">Saturation.</param>
        /// <param name="hue">Hue.</param>
        /// <param name="temperature">Temperature.</param>
        /// <param name="sharpenEnabled">Whether sharpen is enabled.</param>
        /// <param name="blackBars">Black bars.</param>
        /// <param name="scanLinesEnabled">Whether scan lines are enabled.</param>
        /// <param name="scanlinesAmount">Scan lines amount.</param>
        /// <param name="scanlinesSpeed">Scan lines speed.</param>
        public PostProcessing(decimal tiltShiftBlurAmount = default(decimal), bool edgeDetectionEnabled = default(bool), Color edgeDetectionColor = default(Color), decimal ditheringThreshold = default(decimal), decimal tubeDistortionStrength = default(decimal), int pixelizationResolution = default(int), decimal colorSplitStrength = default(decimal), decimal waterRipplesStrength = default(decimal), decimal waterRipplesSpeed = default(decimal), bool sketchEnabled = default(bool), decimal radialBlurAmount = default(decimal), decimal bloomThreshhold = default(decimal), decimal bloomIntensity = default(decimal), decimal vignetteIntensity = default(decimal), Color vignetteColor = default(Color), decimal postExposure = default(decimal), decimal saturation = default(decimal), decimal hue = default(decimal), decimal temperature = default(decimal), bool sharpenEnabled = default(bool), decimal blackBars = default(decimal), bool scanLinesEnabled = default(bool), int scanlinesAmount = default(int), decimal scanlinesSpeed = default(decimal))
        {
            this.TiltShiftBlurAmount = tiltShiftBlurAmount;
            this.EdgeDetectionEnabled = edgeDetectionEnabled;
            this.EdgeDetectionColor = edgeDetectionColor;
            this.DitheringThreshold = ditheringThreshold;
            this.TubeDistortionStrength = tubeDistortionStrength;
            this.PixelizationResolution = pixelizationResolution;
            this.ColorSplitStrength = colorSplitStrength;
            this.WaterRipplesStrength = waterRipplesStrength;
            this.WaterRipplesSpeed = waterRipplesSpeed;
            this.SketchEnabled = sketchEnabled;
            this.RadialBlurAmount = radialBlurAmount;
            this.BloomThreshhold = bloomThreshhold;
            this.BloomIntensity = bloomIntensity;
            this.VignetteIntensity = vignetteIntensity;
            this.VignetteColor = vignetteColor;
            this.PostExposure = postExposure;
            this.Saturation = saturation;
            this.Hue = hue;
            this.Temperature = temperature;
            this.SharpenEnabled = sharpenEnabled;
            this.BlackBars = blackBars;
            this.ScanLinesEnabled = scanLinesEnabled;
            this.ScanlinesAmount = scanlinesAmount;
            this.ScanlinesSpeed = scanlinesSpeed;
        }

        /// <summary>
        /// Tilt-shift blur amount
        /// </summary>
        /// <value>Tilt-shift blur amount</value>
        [DataMember(Name = "tiltShiftBlurAmount", EmitDefaultValue = false)]
        public decimal TiltShiftBlurAmount { get; set; }

        /// <summary>
        /// Whether edge detection is enabled
        /// </summary>
        /// <value>Whether edge detection is enabled</value>
        [DataMember(Name = "edgeDetectionEnabled", EmitDefaultValue = true)]
        public bool EdgeDetectionEnabled { get; set; }

        /// <summary>
        /// Gets or Sets EdgeDetectionColor
        /// </summary>
        [DataMember(Name = "edgeDetectionColor", EmitDefaultValue = false)]
        public Color EdgeDetectionColor { get; set; }

        /// <summary>
        /// Dithering threshold
        /// </summary>
        /// <value>Dithering threshold</value>
        [DataMember(Name = "ditheringThreshold", EmitDefaultValue = false)]
        public decimal DitheringThreshold { get; set; }

        /// <summary>
        /// Tube distortion strength
        /// </summary>
        /// <value>Tube distortion strength</value>
        [DataMember(Name = "tubeDistortionStrength", EmitDefaultValue = false)]
        public decimal TubeDistortionStrength { get; set; }

        /// <summary>
        /// Pixelization resolution
        /// </summary>
        /// <value>Pixelization resolution</value>
        [DataMember(Name = "pixelizationResolution", EmitDefaultValue = false)]
        public int PixelizationResolution { get; set; }

        /// <summary>
        /// Color split strength
        /// </summary>
        /// <value>Color split strength</value>
        [DataMember(Name = "colorSplitStrength", EmitDefaultValue = false)]
        public decimal ColorSplitStrength { get; set; }

        /// <summary>
        /// Water ripples strength
        /// </summary>
        /// <value>Water ripples strength</value>
        [DataMember(Name = "waterRipplesStrength", EmitDefaultValue = false)]
        public decimal WaterRipplesStrength { get; set; }

        /// <summary>
        /// Water ripples speed
        /// </summary>
        /// <value>Water ripples speed</value>
        [DataMember(Name = "waterRipplesSpeed", EmitDefaultValue = false)]
        public decimal WaterRipplesSpeed { get; set; }

        /// <summary>
        /// Whether sketch is enabled
        /// </summary>
        /// <value>Whether sketch is enabled</value>
        [DataMember(Name = "sketchEnabled", EmitDefaultValue = true)]
        public bool SketchEnabled { get; set; }

        /// <summary>
        /// Radial blur amount
        /// </summary>
        /// <value>Radial blur amount</value>
        [DataMember(Name = "radialBlurAmount", EmitDefaultValue = false)]
        public decimal RadialBlurAmount { get; set; }

        /// <summary>
        /// Bloom threshold
        /// </summary>
        /// <value>Bloom threshold</value>
        [DataMember(Name = "bloomThreshhold", EmitDefaultValue = false)]
        public decimal BloomThreshhold { get; set; }

        /// <summary>
        /// Bloom intensity
        /// </summary>
        /// <value>Bloom intensity</value>
        [DataMember(Name = "bloomIntensity", EmitDefaultValue = false)]
        public decimal BloomIntensity { get; set; }

        /// <summary>
        /// Vignette intensity
        /// </summary>
        /// <value>Vignette intensity</value>
        [DataMember(Name = "vignetteIntensity", EmitDefaultValue = false)]
        public decimal VignetteIntensity { get; set; }

        /// <summary>
        /// Gets or Sets VignetteColor
        /// </summary>
        [DataMember(Name = "vignetteColor", EmitDefaultValue = false)]
        public Color VignetteColor { get; set; }

        /// <summary>
        /// Post-exposure
        /// </summary>
        /// <value>Post-exposure</value>
        [DataMember(Name = "postExposure", EmitDefaultValue = false)]
        public decimal PostExposure { get; set; }

        /// <summary>
        /// Saturation
        /// </summary>
        /// <value>Saturation</value>
        [DataMember(Name = "saturation", EmitDefaultValue = false)]
        public decimal Saturation { get; set; }

        /// <summary>
        /// Hue
        /// </summary>
        /// <value>Hue</value>
        [DataMember(Name = "hue", EmitDefaultValue = false)]
        public decimal Hue { get; set; }

        /// <summary>
        /// Temperature
        /// </summary>
        /// <value>Temperature</value>
        [DataMember(Name = "temperature", EmitDefaultValue = false)]
        public decimal Temperature { get; set; }

        /// <summary>
        /// Whether sharpen is enabled
        /// </summary>
        /// <value>Whether sharpen is enabled</value>
        [DataMember(Name = "sharpenEnabled", EmitDefaultValue = true)]
        public bool SharpenEnabled { get; set; }

        /// <summary>
        /// Black bars
        /// </summary>
        /// <value>Black bars</value>
        [DataMember(Name = "blackBars", EmitDefaultValue = false)]
        public decimal BlackBars { get; set; }

        /// <summary>
        /// Whether scan lines are enabled
        /// </summary>
        /// <value>Whether scan lines are enabled</value>
        [DataMember(Name = "ScanLinesEnabled", EmitDefaultValue = true)]
        public bool ScanLinesEnabled { get; set; }

        /// <summary>
        /// Scan lines amount
        /// </summary>
        /// <value>Scan lines amount</value>
        [DataMember(Name = "scanlinesAmount", EmitDefaultValue = false)]
        public int ScanlinesAmount { get; set; }

        /// <summary>
        /// Scan lines speed
        /// </summary>
        /// <value>Scan lines speed</value>
        [DataMember(Name = "scanlinesSpeed", EmitDefaultValue = false)]
        public decimal ScanlinesSpeed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostProcessing {\n");
            sb.Append("  TiltShiftBlurAmount: ").Append(TiltShiftBlurAmount).Append("\n");
            sb.Append("  EdgeDetectionEnabled: ").Append(EdgeDetectionEnabled).Append("\n");
            sb.Append("  EdgeDetectionColor: ").Append(EdgeDetectionColor).Append("\n");
            sb.Append("  DitheringThreshold: ").Append(DitheringThreshold).Append("\n");
            sb.Append("  TubeDistortionStrength: ").Append(TubeDistortionStrength).Append("\n");
            sb.Append("  PixelizationResolution: ").Append(PixelizationResolution).Append("\n");
            sb.Append("  ColorSplitStrength: ").Append(ColorSplitStrength).Append("\n");
            sb.Append("  WaterRipplesStrength: ").Append(WaterRipplesStrength).Append("\n");
            sb.Append("  WaterRipplesSpeed: ").Append(WaterRipplesSpeed).Append("\n");
            sb.Append("  SketchEnabled: ").Append(SketchEnabled).Append("\n");
            sb.Append("  RadialBlurAmount: ").Append(RadialBlurAmount).Append("\n");
            sb.Append("  BloomThreshhold: ").Append(BloomThreshhold).Append("\n");
            sb.Append("  BloomIntensity: ").Append(BloomIntensity).Append("\n");
            sb.Append("  VignetteIntensity: ").Append(VignetteIntensity).Append("\n");
            sb.Append("  VignetteColor: ").Append(VignetteColor).Append("\n");
            sb.Append("  PostExposure: ").Append(PostExposure).Append("\n");
            sb.Append("  Saturation: ").Append(Saturation).Append("\n");
            sb.Append("  Hue: ").Append(Hue).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  SharpenEnabled: ").Append(SharpenEnabled).Append("\n");
            sb.Append("  BlackBars: ").Append(BlackBars).Append("\n");
            sb.Append("  ScanLinesEnabled: ").Append(ScanLinesEnabled).Append("\n");
            sb.Append("  ScanlinesAmount: ").Append(ScanlinesAmount).Append("\n");
            sb.Append("  ScanlinesSpeed: ").Append(ScanlinesSpeed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostProcessing);
        }

        /// <summary>
        /// Returns true if PostProcessing instances are equal
        /// </summary>
        /// <param name="input">Instance of PostProcessing to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostProcessing input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TiltShiftBlurAmount == input.TiltShiftBlurAmount ||
                    this.TiltShiftBlurAmount.Equals(input.TiltShiftBlurAmount)
                ) && 
                (
                    this.EdgeDetectionEnabled == input.EdgeDetectionEnabled ||
                    this.EdgeDetectionEnabled.Equals(input.EdgeDetectionEnabled)
                ) && 
                (
                    this.EdgeDetectionColor == input.EdgeDetectionColor ||
                    (this.EdgeDetectionColor != null &&
                    this.EdgeDetectionColor.Equals(input.EdgeDetectionColor))
                ) && 
                (
                    this.DitheringThreshold == input.DitheringThreshold ||
                    this.DitheringThreshold.Equals(input.DitheringThreshold)
                ) && 
                (
                    this.TubeDistortionStrength == input.TubeDistortionStrength ||
                    this.TubeDistortionStrength.Equals(input.TubeDistortionStrength)
                ) && 
                (
                    this.PixelizationResolution == input.PixelizationResolution ||
                    this.PixelizationResolution.Equals(input.PixelizationResolution)
                ) && 
                (
                    this.ColorSplitStrength == input.ColorSplitStrength ||
                    this.ColorSplitStrength.Equals(input.ColorSplitStrength)
                ) && 
                (
                    this.WaterRipplesStrength == input.WaterRipplesStrength ||
                    this.WaterRipplesStrength.Equals(input.WaterRipplesStrength)
                ) && 
                (
                    this.WaterRipplesSpeed == input.WaterRipplesSpeed ||
                    this.WaterRipplesSpeed.Equals(input.WaterRipplesSpeed)
                ) && 
                (
                    this.SketchEnabled == input.SketchEnabled ||
                    this.SketchEnabled.Equals(input.SketchEnabled)
                ) && 
                (
                    this.RadialBlurAmount == input.RadialBlurAmount ||
                    this.RadialBlurAmount.Equals(input.RadialBlurAmount)
                ) && 
                (
                    this.BloomThreshhold == input.BloomThreshhold ||
                    this.BloomThreshhold.Equals(input.BloomThreshhold)
                ) && 
                (
                    this.BloomIntensity == input.BloomIntensity ||
                    this.BloomIntensity.Equals(input.BloomIntensity)
                ) && 
                (
                    this.VignetteIntensity == input.VignetteIntensity ||
                    this.VignetteIntensity.Equals(input.VignetteIntensity)
                ) && 
                (
                    this.VignetteColor == input.VignetteColor ||
                    (this.VignetteColor != null &&
                    this.VignetteColor.Equals(input.VignetteColor))
                ) && 
                (
                    this.PostExposure == input.PostExposure ||
                    this.PostExposure.Equals(input.PostExposure)
                ) && 
                (
                    this.Saturation == input.Saturation ||
                    this.Saturation.Equals(input.Saturation)
                ) && 
                (
                    this.Hue == input.Hue ||
                    this.Hue.Equals(input.Hue)
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    this.Temperature.Equals(input.Temperature)
                ) && 
                (
                    this.SharpenEnabled == input.SharpenEnabled ||
                    this.SharpenEnabled.Equals(input.SharpenEnabled)
                ) && 
                (
                    this.BlackBars == input.BlackBars ||
                    this.BlackBars.Equals(input.BlackBars)
                ) && 
                (
                    this.ScanLinesEnabled == input.ScanLinesEnabled ||
                    this.ScanLinesEnabled.Equals(input.ScanLinesEnabled)
                ) && 
                (
                    this.ScanlinesAmount == input.ScanlinesAmount ||
                    this.ScanlinesAmount.Equals(input.ScanlinesAmount)
                ) && 
                (
                    this.ScanlinesSpeed == input.ScanlinesSpeed ||
                    this.ScanlinesSpeed.Equals(input.ScanlinesSpeed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.TiltShiftBlurAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.EdgeDetectionEnabled.GetHashCode();
                if (this.EdgeDetectionColor != null)
                {
                    hashCode = (hashCode * 59) + this.EdgeDetectionColor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DitheringThreshold.GetHashCode();
                hashCode = (hashCode * 59) + this.TubeDistortionStrength.GetHashCode();
                hashCode = (hashCode * 59) + this.PixelizationResolution.GetHashCode();
                hashCode = (hashCode * 59) + this.ColorSplitStrength.GetHashCode();
                hashCode = (hashCode * 59) + this.WaterRipplesStrength.GetHashCode();
                hashCode = (hashCode * 59) + this.WaterRipplesSpeed.GetHashCode();
                hashCode = (hashCode * 59) + this.SketchEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.RadialBlurAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.BloomThreshhold.GetHashCode();
                hashCode = (hashCode * 59) + this.BloomIntensity.GetHashCode();
                hashCode = (hashCode * 59) + this.VignetteIntensity.GetHashCode();
                if (this.VignetteColor != null)
                {
                    hashCode = (hashCode * 59) + this.VignetteColor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.PostExposure.GetHashCode();
                hashCode = (hashCode * 59) + this.Saturation.GetHashCode();
                hashCode = (hashCode * 59) + this.Hue.GetHashCode();
                hashCode = (hashCode * 59) + this.Temperature.GetHashCode();
                hashCode = (hashCode * 59) + this.SharpenEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.BlackBars.GetHashCode();
                hashCode = (hashCode * 59) + this.ScanLinesEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.ScanlinesAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.ScanlinesSpeed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
