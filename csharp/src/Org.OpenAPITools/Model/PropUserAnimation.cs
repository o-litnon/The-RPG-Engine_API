/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PropUserAnimation
    /// </summary>
    [DataContract(Name = "PropUserAnimation")]
    public partial class PropUserAnimation : IEquatable<PropUserAnimation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropUserAnimation" /> class.
        /// </summary>
        /// <param name="varVersion">The version of the user animation data.</param>
        /// <param name="name">The name of the user animation.</param>
        /// <param name="start">start.</param>
        /// <param name="end">end.</param>
        /// <param name="toStart">Whether the animation goes to the start.</param>
        /// <param name="pingPong">Whether the animation is ping-pong.</param>
        /// <param name="duration">The duration of the animation.</param>
        /// <param name="startDelay">The start delay of the animation.</param>
        public PropUserAnimation(int varVersion = default(int), string name = default(string), PropTransform start = default(PropTransform), PropTransform end = default(PropTransform), bool toStart = default(bool), bool pingPong = default(bool), decimal duration = default(decimal), decimal startDelay = default(decimal))
        {
            this.VarVersion = varVersion;
            this.Name = name;
            this.Start = start;
            this.End = end;
            this.ToStart = toStart;
            this.PingPong = pingPong;
            this.Duration = duration;
            this.StartDelay = startDelay;
        }

        /// <summary>
        /// The version of the user animation data
        /// </summary>
        /// <value>The version of the user animation data</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// The name of the user animation
        /// </summary>
        /// <value>The name of the user animation</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", EmitDefaultValue = false)]
        public PropTransform Start { get; set; }

        /// <summary>
        /// Gets or Sets End
        /// </summary>
        [DataMember(Name = "end", EmitDefaultValue = false)]
        public PropTransform End { get; set; }

        /// <summary>
        /// Whether the animation goes to the start
        /// </summary>
        /// <value>Whether the animation goes to the start</value>
        [DataMember(Name = "toStart", EmitDefaultValue = true)]
        public bool ToStart { get; set; }

        /// <summary>
        /// Whether the animation is ping-pong
        /// </summary>
        /// <value>Whether the animation is ping-pong</value>
        [DataMember(Name = "pingPong", EmitDefaultValue = true)]
        public bool PingPong { get; set; }

        /// <summary>
        /// The duration of the animation
        /// </summary>
        /// <value>The duration of the animation</value>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public decimal Duration { get; set; }

        /// <summary>
        /// The start delay of the animation
        /// </summary>
        /// <value>The start delay of the animation</value>
        [DataMember(Name = "startDelay", EmitDefaultValue = false)]
        public decimal StartDelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropUserAnimation {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  End: ").Append(End).Append("\n");
            sb.Append("  ToStart: ").Append(ToStart).Append("\n");
            sb.Append("  PingPong: ").Append(PingPong).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  StartDelay: ").Append(StartDelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropUserAnimation);
        }

        /// <summary>
        /// Returns true if PropUserAnimation instances are equal
        /// </summary>
        /// <param name="input">Instance of PropUserAnimation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropUserAnimation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Start == input.Start ||
                    (this.Start != null &&
                    this.Start.Equals(input.Start))
                ) && 
                (
                    this.End == input.End ||
                    (this.End != null &&
                    this.End.Equals(input.End))
                ) && 
                (
                    this.ToStart == input.ToStart ||
                    this.ToStart.Equals(input.ToStart)
                ) && 
                (
                    this.PingPong == input.PingPong ||
                    this.PingPong.Equals(input.PingPong)
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.StartDelay == input.StartDelay ||
                    this.StartDelay.Equals(input.StartDelay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Start != null)
                {
                    hashCode = (hashCode * 59) + this.Start.GetHashCode();
                }
                if (this.End != null)
                {
                    hashCode = (hashCode * 59) + this.End.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ToStart.GetHashCode();
                hashCode = (hashCode * 59) + this.PingPong.GetHashCode();
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                hashCode = (hashCode * 59) + this.StartDelay.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
