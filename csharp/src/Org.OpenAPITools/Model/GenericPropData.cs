/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// A class for storing generic property data
    /// </summary>
    [DataContract(Name = "GenericPropData")]
    public partial class GenericPropData : IEquatable<GenericPropData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GenericPropData" /> class.
        /// </summary>
        /// <param name="varVersion">The version of the GenericPropData.</param>
        /// <param name="bools">A dictionary mapping string keys to boolean values.</param>
        /// <param name="ints">A dictionary mapping string keys to integer values.</param>
        /// <param name="floats">A dictionary mapping string keys to float values.</param>
        /// <param name="strings">A dictionary mapping string keys to string values.</param>
        /// <param name="colors">A dictionary mapping string keys to Color objects.</param>
        /// <param name="vector2s">A dictionary mapping string keys to Vector2 objects.</param>
        /// <param name="vector3s">A dictionary mapping string keys to Vector3 objects.</param>
        /// <param name="vector4s">A dictionary mapping string keys to Vector4 objects.</param>
        /// <param name="quaternions">A dictionary mapping string keys to Quaternion objects.</param>
        public GenericPropData(int varVersion = default(int), Dictionary<string, bool> bools = default(Dictionary<string, bool>), Dictionary<string, int> ints = default(Dictionary<string, int>), Dictionary<string, decimal> floats = default(Dictionary<string, decimal>), Dictionary<string, string> strings = default(Dictionary<string, string>), Dictionary<string, Color> colors = default(Dictionary<string, Color>), Dictionary<string, Vector2> vector2s = default(Dictionary<string, Vector2>), Dictionary<string, Vector3> vector3s = default(Dictionary<string, Vector3>), Dictionary<string, Vector4> vector4s = default(Dictionary<string, Vector4>), Dictionary<string, Quaternion> quaternions = default(Dictionary<string, Quaternion>))
        {
            this.VarVersion = varVersion;
            this.Bools = bools;
            this.Ints = ints;
            this.Floats = floats;
            this.Strings = strings;
            this.Colors = colors;
            this.Vector2s = vector2s;
            this.Vector3s = vector3s;
            this.Vector4s = vector4s;
            this.Quaternions = quaternions;
        }

        /// <summary>
        /// The version of the GenericPropData
        /// </summary>
        /// <value>The version of the GenericPropData</value>
        /// <example>1</example>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// A dictionary mapping string keys to boolean values
        /// </summary>
        /// <value>A dictionary mapping string keys to boolean values</value>
        [DataMember(Name = "bools", EmitDefaultValue = false)]
        public Dictionary<string, bool> Bools { get; set; }

        /// <summary>
        /// A dictionary mapping string keys to integer values
        /// </summary>
        /// <value>A dictionary mapping string keys to integer values</value>
        [DataMember(Name = "ints", EmitDefaultValue = false)]
        public Dictionary<string, int> Ints { get; set; }

        /// <summary>
        /// A dictionary mapping string keys to float values
        /// </summary>
        /// <value>A dictionary mapping string keys to float values</value>
        [DataMember(Name = "floats", EmitDefaultValue = false)]
        public Dictionary<string, decimal> Floats { get; set; }

        /// <summary>
        /// A dictionary mapping string keys to string values
        /// </summary>
        /// <value>A dictionary mapping string keys to string values</value>
        [DataMember(Name = "strings", EmitDefaultValue = false)]
        public Dictionary<string, string> Strings { get; set; }

        /// <summary>
        /// A dictionary mapping string keys to Color objects
        /// </summary>
        /// <value>A dictionary mapping string keys to Color objects</value>
        [DataMember(Name = "colors", EmitDefaultValue = false)]
        public Dictionary<string, Color> Colors { get; set; }

        /// <summary>
        /// A dictionary mapping string keys to Vector2 objects
        /// </summary>
        /// <value>A dictionary mapping string keys to Vector2 objects</value>
        [DataMember(Name = "vector2s", EmitDefaultValue = false)]
        public Dictionary<string, Vector2> Vector2s { get; set; }

        /// <summary>
        /// A dictionary mapping string keys to Vector3 objects
        /// </summary>
        /// <value>A dictionary mapping string keys to Vector3 objects</value>
        [DataMember(Name = "vector3s", EmitDefaultValue = false)]
        public Dictionary<string, Vector3> Vector3s { get; set; }

        /// <summary>
        /// A dictionary mapping string keys to Vector4 objects
        /// </summary>
        /// <value>A dictionary mapping string keys to Vector4 objects</value>
        [DataMember(Name = "vector4s", EmitDefaultValue = false)]
        public Dictionary<string, Vector4> Vector4s { get; set; }

        /// <summary>
        /// A dictionary mapping string keys to Quaternion objects
        /// </summary>
        /// <value>A dictionary mapping string keys to Quaternion objects</value>
        [DataMember(Name = "quaternions", EmitDefaultValue = false)]
        public Dictionary<string, Quaternion> Quaternions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GenericPropData {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Bools: ").Append(Bools).Append("\n");
            sb.Append("  Ints: ").Append(Ints).Append("\n");
            sb.Append("  Floats: ").Append(Floats).Append("\n");
            sb.Append("  Strings: ").Append(Strings).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("  Vector2s: ").Append(Vector2s).Append("\n");
            sb.Append("  Vector3s: ").Append(Vector3s).Append("\n");
            sb.Append("  Vector4s: ").Append(Vector4s).Append("\n");
            sb.Append("  Quaternions: ").Append(Quaternions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GenericPropData);
        }

        /// <summary>
        /// Returns true if GenericPropData instances are equal
        /// </summary>
        /// <param name="input">Instance of GenericPropData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GenericPropData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                ) && 
                (
                    this.Bools == input.Bools ||
                    this.Bools != null &&
                    input.Bools != null &&
                    this.Bools.SequenceEqual(input.Bools)
                ) && 
                (
                    this.Ints == input.Ints ||
                    this.Ints != null &&
                    input.Ints != null &&
                    this.Ints.SequenceEqual(input.Ints)
                ) && 
                (
                    this.Floats == input.Floats ||
                    this.Floats != null &&
                    input.Floats != null &&
                    this.Floats.SequenceEqual(input.Floats)
                ) && 
                (
                    this.Strings == input.Strings ||
                    this.Strings != null &&
                    input.Strings != null &&
                    this.Strings.SequenceEqual(input.Strings)
                ) && 
                (
                    this.Colors == input.Colors ||
                    this.Colors != null &&
                    input.Colors != null &&
                    this.Colors.SequenceEqual(input.Colors)
                ) && 
                (
                    this.Vector2s == input.Vector2s ||
                    this.Vector2s != null &&
                    input.Vector2s != null &&
                    this.Vector2s.SequenceEqual(input.Vector2s)
                ) && 
                (
                    this.Vector3s == input.Vector3s ||
                    this.Vector3s != null &&
                    input.Vector3s != null &&
                    this.Vector3s.SequenceEqual(input.Vector3s)
                ) && 
                (
                    this.Vector4s == input.Vector4s ||
                    this.Vector4s != null &&
                    input.Vector4s != null &&
                    this.Vector4s.SequenceEqual(input.Vector4s)
                ) && 
                (
                    this.Quaternions == input.Quaternions ||
                    this.Quaternions != null &&
                    input.Quaternions != null &&
                    this.Quaternions.SequenceEqual(input.Quaternions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                if (this.Bools != null)
                {
                    hashCode = (hashCode * 59) + this.Bools.GetHashCode();
                }
                if (this.Ints != null)
                {
                    hashCode = (hashCode * 59) + this.Ints.GetHashCode();
                }
                if (this.Floats != null)
                {
                    hashCode = (hashCode * 59) + this.Floats.GetHashCode();
                }
                if (this.Strings != null)
                {
                    hashCode = (hashCode * 59) + this.Strings.GetHashCode();
                }
                if (this.Colors != null)
                {
                    hashCode = (hashCode * 59) + this.Colors.GetHashCode();
                }
                if (this.Vector2s != null)
                {
                    hashCode = (hashCode * 59) + this.Vector2s.GetHashCode();
                }
                if (this.Vector3s != null)
                {
                    hashCode = (hashCode * 59) + this.Vector3s.GetHashCode();
                }
                if (this.Vector4s != null)
                {
                    hashCode = (hashCode * 59) + this.Vector4s.GetHashCode();
                }
                if (this.Quaternions != null)
                {
                    hashCode = (hashCode * 59) + this.Quaternions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
