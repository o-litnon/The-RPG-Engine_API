/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PropMotion
    /// </summary>
    [DataContract(Name = "PropMotion")]
    public partial class PropMotion : IEquatable<PropMotion>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropMotion" /> class.
        /// </summary>
        /// <param name="moveSpeed">The move speed of the prop.</param>
        /// <param name="rotateSpeed">The rotate speed of the prop.</param>
        public PropMotion(decimal moveSpeed = default(decimal), decimal rotateSpeed = default(decimal))
        {
            this.MoveSpeed = moveSpeed;
            this.RotateSpeed = rotateSpeed;
        }

        /// <summary>
        /// The move speed of the prop
        /// </summary>
        /// <value>The move speed of the prop</value>
        [DataMember(Name = "moveSpeed", EmitDefaultValue = false)]
        public decimal MoveSpeed { get; set; }

        /// <summary>
        /// The rotate speed of the prop
        /// </summary>
        /// <value>The rotate speed of the prop</value>
        [DataMember(Name = "rotateSpeed", EmitDefaultValue = false)]
        public decimal RotateSpeed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropMotion {\n");
            sb.Append("  MoveSpeed: ").Append(MoveSpeed).Append("\n");
            sb.Append("  RotateSpeed: ").Append(RotateSpeed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropMotion);
        }

        /// <summary>
        /// Returns true if PropMotion instances are equal
        /// </summary>
        /// <param name="input">Instance of PropMotion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropMotion input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MoveSpeed == input.MoveSpeed ||
                    this.MoveSpeed.Equals(input.MoveSpeed)
                ) && 
                (
                    this.RotateSpeed == input.RotateSpeed ||
                    this.RotateSpeed.Equals(input.RotateSpeed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.MoveSpeed.GetHashCode();
                hashCode = (hashCode * 59) + this.RotateSpeed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
