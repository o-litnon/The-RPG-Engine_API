/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PropCharacterData
    /// </summary>
    [DataContract(Name = "PropCharacterData")]
    public partial class PropCharacterData : IEquatable<PropCharacterData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropCharacterData" /> class.
        /// </summary>
        /// <param name="showHelmet">Whether the helmet is shown.</param>
        /// <param name="parts">List of character parts.</param>
        /// <param name="colors">colors.</param>
        public PropCharacterData(bool showHelmet = default(bool), List<string> parts = default(List<string>), Dictionary<string, Color> colors = default(Dictionary<string, Color>))
        {
            this.ShowHelmet = showHelmet;
            this.Parts = parts;
            this.Colors = colors;
        }

        /// <summary>
        /// Whether the helmet is shown
        /// </summary>
        /// <value>Whether the helmet is shown</value>
        [DataMember(Name = "showHelmet", EmitDefaultValue = true)]
        public bool ShowHelmet { get; set; }

        /// <summary>
        /// List of character parts
        /// </summary>
        /// <value>List of character parts</value>
        [DataMember(Name = "parts", EmitDefaultValue = false)]
        public List<string> Parts { get; set; }

        /// <summary>
        /// Gets or Sets Colors
        /// </summary>
        [DataMember(Name = "colors", EmitDefaultValue = false)]
        public Dictionary<string, Color> Colors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropCharacterData {\n");
            sb.Append("  ShowHelmet: ").Append(ShowHelmet).Append("\n");
            sb.Append("  Parts: ").Append(Parts).Append("\n");
            sb.Append("  Colors: ").Append(Colors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropCharacterData);
        }

        /// <summary>
        /// Returns true if PropCharacterData instances are equal
        /// </summary>
        /// <param name="input">Instance of PropCharacterData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropCharacterData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ShowHelmet == input.ShowHelmet ||
                    this.ShowHelmet.Equals(input.ShowHelmet)
                ) && 
                (
                    this.Parts == input.Parts ||
                    this.Parts != null &&
                    input.Parts != null &&
                    this.Parts.SequenceEqual(input.Parts)
                ) && 
                (
                    this.Colors == input.Colors ||
                    this.Colors != null &&
                    input.Colors != null &&
                    this.Colors.SequenceEqual(input.Colors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ShowHelmet.GetHashCode();
                if (this.Parts != null)
                {
                    hashCode = (hashCode * 59) + this.Parts.GetHashCode();
                }
                if (this.Colors != null)
                {
                    hashCode = (hashCode * 59) + this.Colors.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
