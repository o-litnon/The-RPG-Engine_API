/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PropCanvasData
    /// </summary>
    [DataContract(Name = "PropCanvasData")]
    public partial class PropCanvasData : IEquatable<PropCanvasData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PropCanvasData" /> class.
        /// </summary>
        /// <param name="varVersion">The version of the canvas data.</param>
        /// <param name="showTitle">Whether the title is shown on the canvas.</param>
        /// <param name="sliders">sliders.</param>
        /// <param name="showStatuses">Whether statuses are shown on the canvas.</param>
        /// <param name="statuses">statuses.</param>
        public PropCanvasData(int varVersion = default(int), bool showTitle = default(bool), Dictionary<string, PropCanvasSlider> sliders = default(Dictionary<string, PropCanvasSlider>), bool showStatuses = default(bool), List<string> statuses = default(List<string>))
        {
            this.VarVersion = varVersion;
            this.ShowTitle = showTitle;
            this.Sliders = sliders;
            this.ShowStatuses = showStatuses;
            this.Statuses = statuses;
        }

        /// <summary>
        /// The version of the canvas data
        /// </summary>
        /// <value>The version of the canvas data</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Whether the title is shown on the canvas
        /// </summary>
        /// <value>Whether the title is shown on the canvas</value>
        [DataMember(Name = "showTitle", EmitDefaultValue = true)]
        public bool ShowTitle { get; set; }

        /// <summary>
        /// Gets or Sets Sliders
        /// </summary>
        [DataMember(Name = "sliders", EmitDefaultValue = false)]
        public Dictionary<string, PropCanvasSlider> Sliders { get; set; }

        /// <summary>
        /// Whether statuses are shown on the canvas
        /// </summary>
        /// <value>Whether statuses are shown on the canvas</value>
        [DataMember(Name = "showStatuses", EmitDefaultValue = true)]
        public bool ShowStatuses { get; set; }

        /// <summary>
        /// Gets or Sets Statuses
        /// </summary>
        [DataMember(Name = "statuses", EmitDefaultValue = false)]
        public List<string> Statuses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PropCanvasData {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  ShowTitle: ").Append(ShowTitle).Append("\n");
            sb.Append("  Sliders: ").Append(Sliders).Append("\n");
            sb.Append("  ShowStatuses: ").Append(ShowStatuses).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PropCanvasData);
        }

        /// <summary>
        /// Returns true if PropCanvasData instances are equal
        /// </summary>
        /// <param name="input">Instance of PropCanvasData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PropCanvasData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                ) && 
                (
                    this.ShowTitle == input.ShowTitle ||
                    this.ShowTitle.Equals(input.ShowTitle)
                ) && 
                (
                    this.Sliders == input.Sliders ||
                    this.Sliders != null &&
                    input.Sliders != null &&
                    this.Sliders.SequenceEqual(input.Sliders)
                ) && 
                (
                    this.ShowStatuses == input.ShowStatuses ||
                    this.ShowStatuses.Equals(input.ShowStatuses)
                ) && 
                (
                    this.Statuses == input.Statuses ||
                    this.Statuses != null &&
                    input.Statuses != null &&
                    this.Statuses.SequenceEqual(input.Statuses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.ShowTitle.GetHashCode();
                if (this.Sliders != null)
                {
                    hashCode = (hashCode * 59) + this.Sliders.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ShowStatuses.GetHashCode();
                if (this.Statuses != null)
                {
                    hashCode = (hashCode * 59) + this.Statuses.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
