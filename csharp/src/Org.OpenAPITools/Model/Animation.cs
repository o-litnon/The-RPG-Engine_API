/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Animation
    /// </summary>
    [DataContract(Name = "Animation")]
    public partial class Animation : IEquatable<Animation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Animation" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="type">type.</param>
        /// <param name="boolValue">boolValue.</param>
        /// <param name="intValue">intValue.</param>
        /// <param name="floatValue">floatValue.</param>
        /// <param name="stringValue">stringValue.</param>
        public Animation(string name = default(string), string type = default(string), bool? boolValue = default(bool?), int? intValue = default(int?), float? floatValue = default(float?), string stringValue = default(string))
        {
            this.Name = name;
            this.Type = type;
            this.BoolValue = boolValue;
            this.IntValue = intValue;
            this.FloatValue = floatValue;
            this.StringValue = stringValue;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <example>Death</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /// <example>boolean</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets BoolValue
        /// </summary>
        [DataMember(Name = "boolValue", EmitDefaultValue = true)]
        public bool? BoolValue { get; set; }

        /// <summary>
        /// Gets or Sets IntValue
        /// </summary>
        [DataMember(Name = "intValue", EmitDefaultValue = true)]
        public int? IntValue { get; set; }

        /// <summary>
        /// Gets or Sets FloatValue
        /// </summary>
        [DataMember(Name = "floatValue", EmitDefaultValue = true)]
        public float? FloatValue { get; set; }

        /// <summary>
        /// Gets or Sets StringValue
        /// </summary>
        [DataMember(Name = "stringValue", EmitDefaultValue = true)]
        public string StringValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Animation {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  BoolValue: ").Append(BoolValue).Append("\n");
            sb.Append("  IntValue: ").Append(IntValue).Append("\n");
            sb.Append("  FloatValue: ").Append(FloatValue).Append("\n");
            sb.Append("  StringValue: ").Append(StringValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Animation);
        }

        /// <summary>
        /// Returns true if Animation instances are equal
        /// </summary>
        /// <param name="input">Instance of Animation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Animation input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.BoolValue == input.BoolValue ||
                    (this.BoolValue != null &&
                    this.BoolValue.Equals(input.BoolValue))
                ) && 
                (
                    this.IntValue == input.IntValue ||
                    (this.IntValue != null &&
                    this.IntValue.Equals(input.IntValue))
                ) && 
                (
                    this.FloatValue == input.FloatValue ||
                    (this.FloatValue != null &&
                    this.FloatValue.Equals(input.FloatValue))
                ) && 
                (
                    this.StringValue == input.StringValue ||
                    (this.StringValue != null &&
                    this.StringValue.Equals(input.StringValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.BoolValue != null)
                {
                    hashCode = (hashCode * 59) + this.BoolValue.GetHashCode();
                }
                if (this.IntValue != null)
                {
                    hashCode = (hashCode * 59) + this.IntValue.GetHashCode();
                }
                if (this.FloatValue != null)
                {
                    hashCode = (hashCode * 59) + this.FloatValue.GetHashCode();
                }
                if (this.StringValue != null)
                {
                    hashCode = (hashCode * 59) + this.StringValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
