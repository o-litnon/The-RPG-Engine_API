/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Atmosphere
    /// </summary>
    [DataContract(Name = "Atmosphere")]
    public partial class Atmosphere : IEquatable<Atmosphere>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Atmosphere" /> class.
        /// </summary>
        /// <param name="varVersion">The version of the atmosphere data.</param>
        /// <param name="lightRotation">lightRotation.</param>
        /// <param name="lightColour">lightColour.</param>
        /// <param name="ambientColor">ambientColor.</param>
        /// <param name="enableFog">Whether fog is enabled.</param>
        /// <param name="fogColour">fogColour.</param>
        /// <param name="fogDensity">Fog density.</param>
        /// <param name="fogHeight">Fog height.</param>
        /// <param name="clouds">Whether clouds are enabled.</param>
        /// <param name="abyss">Whether abyss is enabled.</param>
        /// <param name="table">Whether table is enabled.</param>
        /// <param name="tableColor">tableColor.</param>
        /// <param name="skybox">Skybox image name.</param>
        /// <param name="rainAmount">Rain amount.</param>
        /// <param name="snowAmount">Snow amount.</param>
        public Atmosphere(int varVersion = default(int), Vector2 lightRotation = default(Vector2), Color lightColour = default(Color), Color ambientColor = default(Color), bool enableFog = default(bool), Color fogColour = default(Color), decimal fogDensity = default(decimal), decimal fogHeight = default(decimal), bool clouds = default(bool), bool abyss = default(bool), bool table = default(bool), Color tableColor = default(Color), string skybox = default(string), decimal rainAmount = default(decimal), decimal snowAmount = default(decimal))
        {
            this.VarVersion = varVersion;
            this.LightRotation = lightRotation;
            this.LightColour = lightColour;
            this.AmbientColor = ambientColor;
            this.EnableFog = enableFog;
            this.FogColour = fogColour;
            this.FogDensity = fogDensity;
            this.FogHeight = fogHeight;
            this.Clouds = clouds;
            this.Abyss = abyss;
            this.Table = table;
            this.TableColor = tableColor;
            this.Skybox = skybox;
            this.RainAmount = rainAmount;
            this.SnowAmount = snowAmount;
        }

        /// <summary>
        /// The version of the atmosphere data
        /// </summary>
        /// <value>The version of the atmosphere data</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets LightRotation
        /// </summary>
        [DataMember(Name = "lightRotation", EmitDefaultValue = false)]
        public Vector2 LightRotation { get; set; }

        /// <summary>
        /// Gets or Sets LightColour
        /// </summary>
        [DataMember(Name = "lightColour", EmitDefaultValue = false)]
        public Color LightColour { get; set; }

        /// <summary>
        /// Gets or Sets AmbientColor
        /// </summary>
        [DataMember(Name = "ambientColor", EmitDefaultValue = false)]
        public Color AmbientColor { get; set; }

        /// <summary>
        /// Whether fog is enabled
        /// </summary>
        /// <value>Whether fog is enabled</value>
        [DataMember(Name = "enableFog", EmitDefaultValue = true)]
        public bool EnableFog { get; set; }

        /// <summary>
        /// Gets or Sets FogColour
        /// </summary>
        [DataMember(Name = "fogColour", EmitDefaultValue = false)]
        public Color FogColour { get; set; }

        /// <summary>
        /// Fog density
        /// </summary>
        /// <value>Fog density</value>
        /// <example>1</example>
        [DataMember(Name = "fogDensity", EmitDefaultValue = false)]
        public decimal FogDensity { get; set; }

        /// <summary>
        /// Fog height
        /// </summary>
        /// <value>Fog height</value>
        /// <example>5</example>
        [DataMember(Name = "fogHeight", EmitDefaultValue = false)]
        public decimal FogHeight { get; set; }

        /// <summary>
        /// Whether clouds are enabled
        /// </summary>
        /// <value>Whether clouds are enabled</value>
        [DataMember(Name = "clouds", EmitDefaultValue = true)]
        public bool Clouds { get; set; }

        /// <summary>
        /// Whether abyss is enabled
        /// </summary>
        /// <value>Whether abyss is enabled</value>
        [DataMember(Name = "abyss", EmitDefaultValue = true)]
        public bool Abyss { get; set; }

        /// <summary>
        /// Whether table is enabled
        /// </summary>
        /// <value>Whether table is enabled</value>
        [DataMember(Name = "table", EmitDefaultValue = true)]
        public bool Table { get; set; }

        /// <summary>
        /// Gets or Sets TableColor
        /// </summary>
        [DataMember(Name = "tableColor", EmitDefaultValue = false)]
        public Color TableColor { get; set; }

        /// <summary>
        /// Skybox image name
        /// </summary>
        /// <value>Skybox image name</value>
        /// <example>FS000_Day_01_Sunless</example>
        [DataMember(Name = "skybox", EmitDefaultValue = false)]
        public string Skybox { get; set; }

        /// <summary>
        /// Rain amount
        /// </summary>
        /// <value>Rain amount</value>
        [DataMember(Name = "rainAmount", EmitDefaultValue = false)]
        public decimal RainAmount { get; set; }

        /// <summary>
        /// Snow amount
        /// </summary>
        /// <value>Snow amount</value>
        [DataMember(Name = "snowAmount", EmitDefaultValue = false)]
        public decimal SnowAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Atmosphere {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  LightRotation: ").Append(LightRotation).Append("\n");
            sb.Append("  LightColour: ").Append(LightColour).Append("\n");
            sb.Append("  AmbientColor: ").Append(AmbientColor).Append("\n");
            sb.Append("  EnableFog: ").Append(EnableFog).Append("\n");
            sb.Append("  FogColour: ").Append(FogColour).Append("\n");
            sb.Append("  FogDensity: ").Append(FogDensity).Append("\n");
            sb.Append("  FogHeight: ").Append(FogHeight).Append("\n");
            sb.Append("  Clouds: ").Append(Clouds).Append("\n");
            sb.Append("  Abyss: ").Append(Abyss).Append("\n");
            sb.Append("  Table: ").Append(Table).Append("\n");
            sb.Append("  TableColor: ").Append(TableColor).Append("\n");
            sb.Append("  Skybox: ").Append(Skybox).Append("\n");
            sb.Append("  RainAmount: ").Append(RainAmount).Append("\n");
            sb.Append("  SnowAmount: ").Append(SnowAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Atmosphere);
        }

        /// <summary>
        /// Returns true if Atmosphere instances are equal
        /// </summary>
        /// <param name="input">Instance of Atmosphere to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Atmosphere input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                ) && 
                (
                    this.LightRotation == input.LightRotation ||
                    (this.LightRotation != null &&
                    this.LightRotation.Equals(input.LightRotation))
                ) && 
                (
                    this.LightColour == input.LightColour ||
                    (this.LightColour != null &&
                    this.LightColour.Equals(input.LightColour))
                ) && 
                (
                    this.AmbientColor == input.AmbientColor ||
                    (this.AmbientColor != null &&
                    this.AmbientColor.Equals(input.AmbientColor))
                ) && 
                (
                    this.EnableFog == input.EnableFog ||
                    this.EnableFog.Equals(input.EnableFog)
                ) && 
                (
                    this.FogColour == input.FogColour ||
                    (this.FogColour != null &&
                    this.FogColour.Equals(input.FogColour))
                ) && 
                (
                    this.FogDensity == input.FogDensity ||
                    this.FogDensity.Equals(input.FogDensity)
                ) && 
                (
                    this.FogHeight == input.FogHeight ||
                    this.FogHeight.Equals(input.FogHeight)
                ) && 
                (
                    this.Clouds == input.Clouds ||
                    this.Clouds.Equals(input.Clouds)
                ) && 
                (
                    this.Abyss == input.Abyss ||
                    this.Abyss.Equals(input.Abyss)
                ) && 
                (
                    this.Table == input.Table ||
                    this.Table.Equals(input.Table)
                ) && 
                (
                    this.TableColor == input.TableColor ||
                    (this.TableColor != null &&
                    this.TableColor.Equals(input.TableColor))
                ) && 
                (
                    this.Skybox == input.Skybox ||
                    (this.Skybox != null &&
                    this.Skybox.Equals(input.Skybox))
                ) && 
                (
                    this.RainAmount == input.RainAmount ||
                    this.RainAmount.Equals(input.RainAmount)
                ) && 
                (
                    this.SnowAmount == input.SnowAmount ||
                    this.SnowAmount.Equals(input.SnowAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                if (this.LightRotation != null)
                {
                    hashCode = (hashCode * 59) + this.LightRotation.GetHashCode();
                }
                if (this.LightColour != null)
                {
                    hashCode = (hashCode * 59) + this.LightColour.GetHashCode();
                }
                if (this.AmbientColor != null)
                {
                    hashCode = (hashCode * 59) + this.AmbientColor.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableFog.GetHashCode();
                if (this.FogColour != null)
                {
                    hashCode = (hashCode * 59) + this.FogColour.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.FogDensity.GetHashCode();
                hashCode = (hashCode * 59) + this.FogHeight.GetHashCode();
                hashCode = (hashCode * 59) + this.Clouds.GetHashCode();
                hashCode = (hashCode * 59) + this.Abyss.GetHashCode();
                hashCode = (hashCode * 59) + this.Table.GetHashCode();
                if (this.TableColor != null)
                {
                    hashCode = (hashCode * 59) + this.TableColor.GetHashCode();
                }
                if (this.Skybox != null)
                {
                    hashCode = (hashCode * 59) + this.Skybox.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RainAmount.GetHashCode();
                hashCode = (hashCode * 59) + this.SnowAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
