/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Prop
    /// </summary>
    [DataContract(Name = "Prop")]
    public partial class Prop : IEquatable<Prop>, IValidatableObject
    {
        /// <summary>
        /// The type of the prop
        /// </summary>
        /// <value>The type of the prop</value>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum NUMBER_1 for value: 1
            /// </summary>
            NUMBER_1 = 1,

            /// <summary>
            /// Enum NUMBER_2 for value: 2
            /// </summary>
            NUMBER_2 = 2,

            /// <summary>
            /// Enum NUMBER_3 for value: 3
            /// </summary>
            NUMBER_3 = 3,

            /// <summary>
            /// Enum NUMBER_4 for value: 4
            /// </summary>
            NUMBER_4 = 4,

            /// <summary>
            /// Enum NUMBER_5 for value: 5
            /// </summary>
            NUMBER_5 = 5,

            /// <summary>
            /// Enum NUMBER_6 for value: 6
            /// </summary>
            NUMBER_6 = 6,

            /// <summary>
            /// Enum NUMBER_7 for value: 7
            /// </summary>
            NUMBER_7 = 7,

            /// <summary>
            /// Enum NUMBER_8 for value: 8
            /// </summary>
            NUMBER_8 = 8,

            /// <summary>
            /// Enum NUMBER_9 for value: 9
            /// </summary>
            NUMBER_9 = 9,

            /// <summary>
            /// Enum NUMBER_10 for value: 10
            /// </summary>
            NUMBER_10 = 10,

            /// <summary>
            /// Enum NUMBER_11 for value: 11
            /// </summary>
            NUMBER_11 = 11
        }


        /// <summary>
        /// The type of the prop
        /// </summary>
        /// <value>The type of the prop</value>
        /// <example>1</example>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Prop" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Prop() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Prop" /> class.
        /// </summary>
        /// <param name="varVersion">The version of the prop data.</param>
        /// <param name="type">The type of the prop.</param>
        /// <param name="id">The prefab ID of the prop (required).</param>
        /// <param name="guid">A uniquie identifier (required).</param>
        /// <param name="inGameName">The in-game name of the prop.</param>
        /// <param name="parentGuid">A uniquie identifier.</param>
        /// <param name="holderPosId">The holder position ID (default to -1).</param>
        /// <param name="isLocked">Whether the prop is locked.</param>
        /// <param name="isHidden">Whether the prop is hidden.</param>
        public Prop(int varVersion = default(int), TypeEnum? type = default(TypeEnum?), string id = default(string), string guid = default(string), string inGameName = default(string), string parentGuid = default(string), int holderPosId = -1, bool isLocked = default(bool), bool isHidden = default(bool))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for Prop and cannot be null");
            }
            this.Id = id;
            // to ensure "guid" is required (not null)
            if (guid == null)
            {
                throw new ArgumentNullException("guid is a required property for Prop and cannot be null");
            }
            this.Guid = guid;
            this.VarVersion = varVersion;
            this.Type = type;
            this.InGameName = inGameName;
            this.ParentGuid = parentGuid;
            this.HolderPosId = holderPosId;
            this.IsLocked = isLocked;
            this.IsHidden = isHidden;
        }

        /// <summary>
        /// The version of the prop data
        /// </summary>
        /// <value>The version of the prop data</value>
        /// <example>12</example>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// The prefab ID of the prop
        /// </summary>
        /// <value>The prefab ID of the prop</value>
        /// <example>Human Nomad Male 03</example>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// A uniquie identifier
        /// </summary>
        /// <value>A uniquie identifier</value>
        /// <example>70bf4e8b-f720-4ed0-967a-d66b53ac34b8</example>
        [DataMember(Name = "guid", IsRequired = true, EmitDefaultValue = true)]
        public string Guid { get; set; }

        /// <summary>
        /// The in-game name of the prop
        /// </summary>
        /// <value>The in-game name of the prop</value>
        /// <example>Nomad</example>
        [DataMember(Name = "inGameName", EmitDefaultValue = false)]
        public string InGameName { get; set; }

        /// <summary>
        /// A uniquie identifier
        /// </summary>
        /// <value>A uniquie identifier</value>
        /// <example>70bf4e8b-f720-4ed0-967a-d66b53ac34b8</example>
        [DataMember(Name = "parentGuid", EmitDefaultValue = false)]
        public string ParentGuid { get; set; }

        /// <summary>
        /// The holder position ID
        /// </summary>
        /// <value>The holder position ID</value>
        [DataMember(Name = "holderPosId", EmitDefaultValue = false)]
        public int HolderPosId { get; set; }

        /// <summary>
        /// Whether the prop is locked
        /// </summary>
        /// <value>Whether the prop is locked</value>
        [DataMember(Name = "isLocked", EmitDefaultValue = true)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// Whether the prop is hidden
        /// </summary>
        /// <value>Whether the prop is hidden</value>
        [DataMember(Name = "isHidden", EmitDefaultValue = true)]
        public bool IsHidden { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Prop {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  InGameName: ").Append(InGameName).Append("\n");
            sb.Append("  ParentGuid: ").Append(ParentGuid).Append("\n");
            sb.Append("  HolderPosId: ").Append(HolderPosId).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Prop);
        }

        /// <summary>
        /// Returns true if Prop instances are equal
        /// </summary>
        /// <param name="input">Instance of Prop to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Prop input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Guid == input.Guid ||
                    (this.Guid != null &&
                    this.Guid.Equals(input.Guid))
                ) && 
                (
                    this.InGameName == input.InGameName ||
                    (this.InGameName != null &&
                    this.InGameName.Equals(input.InGameName))
                ) && 
                (
                    this.ParentGuid == input.ParentGuid ||
                    (this.ParentGuid != null &&
                    this.ParentGuid.Equals(input.ParentGuid))
                ) && 
                (
                    this.HolderPosId == input.HolderPosId ||
                    this.HolderPosId.Equals(input.HolderPosId)
                ) && 
                (
                    this.IsLocked == input.IsLocked ||
                    this.IsLocked.Equals(input.IsLocked)
                ) && 
                (
                    this.IsHidden == input.IsHidden ||
                    this.IsHidden.Equals(input.IsHidden)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Guid != null)
                {
                    hashCode = (hashCode * 59) + this.Guid.GetHashCode();
                }
                if (this.InGameName != null)
                {
                    hashCode = (hashCode * 59) + this.InGameName.GetHashCode();
                }
                if (this.ParentGuid != null)
                {
                    hashCode = (hashCode * 59) + this.ParentGuid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HolderPosId.GetHashCode();
                hashCode = (hashCode * 59) + this.IsLocked.GetHashCode();
                hashCode = (hashCode * 59) + this.IsHidden.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
