/*
 * The RPG Engine API
 *
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MapDataResponse
    /// </summary>
    [DataContract(Name = "MapDataResponse")]
    public partial class MapDataResponse : IEquatable<MapDataResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MapDataResponse" /> class.
        /// </summary>
        /// <param name="varVersion">The version of the map data.</param>
        /// <param name="title">The title of the map.</param>
        /// <param name="lightRotation">The rotation of light.</param>
        /// <param name="atmosphere">atmosphere.</param>
        /// <param name="postProcessing">postProcessing.</param>
        /// <param name="settings">settings.</param>
        /// <param name="cutoutSettings">cutoutSettings.</param>
        /// <param name="ppu">Pixels per unit.</param>
        /// <param name="controlledProps">controlledProps.</param>
        /// <param name="controlledStates">controlledStates.</param>
        /// <param name="turnOrderGuids">turnOrderGuids.</param>
        /// <param name="cameraViews">cameraViews.</param>
        /// <param name="startingCamera">A uniquie identifier.</param>
        public MapDataResponse(int varVersion = default(int), string title = default(string), decimal lightRotation = default(decimal), Atmosphere atmosphere = default(Atmosphere), PostProcessing postProcessing = default(PostProcessing), Settings settings = default(Settings), CutoutSettingsData cutoutSettings = default(CutoutSettingsData), int ppu = default(int), Controllable controlledProps = default(Controllable), Controllable controlledStates = default(Controllable), List<string> turnOrderGuids = default(List<string>), Controllable cameraViews = default(Controllable), string startingCamera = default(string))
        {
            this.VarVersion = varVersion;
            this.Title = title;
            this.LightRotation = lightRotation;
            this.Atmosphere = atmosphere;
            this.PostProcessing = postProcessing;
            this.Settings = settings;
            this.CutoutSettings = cutoutSettings;
            this.Ppu = ppu;
            this.ControlledProps = controlledProps;
            this.ControlledStates = controlledStates;
            this.TurnOrderGuids = turnOrderGuids;
            this.CameraViews = cameraViews;
            this.StartingCamera = startingCamera;
        }

        /// <summary>
        /// The version of the map data
        /// </summary>
        /// <value>The version of the map data</value>
        [DataMember(Name = "version", EmitDefaultValue = false)]
        public int VarVersion { get; set; }

        /// <summary>
        /// The title of the map
        /// </summary>
        /// <value>The title of the map</value>
        /// <example>My Map</example>
        [DataMember(Name = "title", EmitDefaultValue = false)]
        public string Title { get; set; }

        /// <summary>
        /// The rotation of light
        /// </summary>
        /// <value>The rotation of light</value>
        [DataMember(Name = "lightRotation", EmitDefaultValue = false)]
        public decimal LightRotation { get; set; }

        /// <summary>
        /// Gets or Sets Atmosphere
        /// </summary>
        [DataMember(Name = "atmosphere", EmitDefaultValue = false)]
        public Atmosphere Atmosphere { get; set; }

        /// <summary>
        /// Gets or Sets PostProcessing
        /// </summary>
        [DataMember(Name = "postProcessing", EmitDefaultValue = false)]
        public PostProcessing PostProcessing { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name = "settings", EmitDefaultValue = false)]
        public Settings Settings { get; set; }

        /// <summary>
        /// Gets or Sets CutoutSettings
        /// </summary>
        [DataMember(Name = "cutoutSettings", EmitDefaultValue = false)]
        public CutoutSettingsData CutoutSettings { get; set; }

        /// <summary>
        /// Pixels per unit
        /// </summary>
        /// <value>Pixels per unit</value>
        /// <example>2</example>
        [DataMember(Name = "ppu", EmitDefaultValue = false)]
        public int Ppu { get; set; }

        /// <summary>
        /// Gets or Sets ControlledProps
        /// </summary>
        [DataMember(Name = "controlledProps", EmitDefaultValue = false)]
        public Controllable ControlledProps { get; set; }

        /// <summary>
        /// Gets or Sets ControlledStates
        /// </summary>
        [DataMember(Name = "controlledStates", EmitDefaultValue = false)]
        public Controllable ControlledStates { get; set; }

        /// <summary>
        /// Gets or Sets TurnOrderGuids
        /// </summary>
        [DataMember(Name = "turnOrderGuids", EmitDefaultValue = false)]
        public List<string> TurnOrderGuids { get; set; }

        /// <summary>
        /// Gets or Sets CameraViews
        /// </summary>
        [DataMember(Name = "cameraViews", EmitDefaultValue = false)]
        public Controllable CameraViews { get; set; }

        /// <summary>
        /// A uniquie identifier
        /// </summary>
        /// <value>A uniquie identifier</value>
        /// <example>70bf4e8b-f720-4ed0-967a-d66b53ac34b8</example>
        [DataMember(Name = "startingCamera", EmitDefaultValue = false)]
        public string StartingCamera { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MapDataResponse {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  LightRotation: ").Append(LightRotation).Append("\n");
            sb.Append("  Atmosphere: ").Append(Atmosphere).Append("\n");
            sb.Append("  PostProcessing: ").Append(PostProcessing).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  CutoutSettings: ").Append(CutoutSettings).Append("\n");
            sb.Append("  Ppu: ").Append(Ppu).Append("\n");
            sb.Append("  ControlledProps: ").Append(ControlledProps).Append("\n");
            sb.Append("  ControlledStates: ").Append(ControlledStates).Append("\n");
            sb.Append("  TurnOrderGuids: ").Append(TurnOrderGuids).Append("\n");
            sb.Append("  CameraViews: ").Append(CameraViews).Append("\n");
            sb.Append("  StartingCamera: ").Append(StartingCamera).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MapDataResponse);
        }

        /// <summary>
        /// Returns true if MapDataResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of MapDataResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MapDataResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VarVersion == input.VarVersion ||
                    this.VarVersion.Equals(input.VarVersion)
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.LightRotation == input.LightRotation ||
                    this.LightRotation.Equals(input.LightRotation)
                ) && 
                (
                    this.Atmosphere == input.Atmosphere ||
                    (this.Atmosphere != null &&
                    this.Atmosphere.Equals(input.Atmosphere))
                ) && 
                (
                    this.PostProcessing == input.PostProcessing ||
                    (this.PostProcessing != null &&
                    this.PostProcessing.Equals(input.PostProcessing))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.CutoutSettings == input.CutoutSettings ||
                    (this.CutoutSettings != null &&
                    this.CutoutSettings.Equals(input.CutoutSettings))
                ) && 
                (
                    this.Ppu == input.Ppu ||
                    this.Ppu.Equals(input.Ppu)
                ) && 
                (
                    this.ControlledProps == input.ControlledProps ||
                    (this.ControlledProps != null &&
                    this.ControlledProps.Equals(input.ControlledProps))
                ) && 
                (
                    this.ControlledStates == input.ControlledStates ||
                    (this.ControlledStates != null &&
                    this.ControlledStates.Equals(input.ControlledStates))
                ) && 
                (
                    this.TurnOrderGuids == input.TurnOrderGuids ||
                    this.TurnOrderGuids != null &&
                    input.TurnOrderGuids != null &&
                    this.TurnOrderGuids.SequenceEqual(input.TurnOrderGuids)
                ) && 
                (
                    this.CameraViews == input.CameraViews ||
                    (this.CameraViews != null &&
                    this.CameraViews.Equals(input.CameraViews))
                ) && 
                (
                    this.StartingCamera == input.StartingCamera ||
                    (this.StartingCamera != null &&
                    this.StartingCamera.Equals(input.StartingCamera))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VarVersion.GetHashCode();
                if (this.Title != null)
                {
                    hashCode = (hashCode * 59) + this.Title.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LightRotation.GetHashCode();
                if (this.Atmosphere != null)
                {
                    hashCode = (hashCode * 59) + this.Atmosphere.GetHashCode();
                }
                if (this.PostProcessing != null)
                {
                    hashCode = (hashCode * 59) + this.PostProcessing.GetHashCode();
                }
                if (this.Settings != null)
                {
                    hashCode = (hashCode * 59) + this.Settings.GetHashCode();
                }
                if (this.CutoutSettings != null)
                {
                    hashCode = (hashCode * 59) + this.CutoutSettings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Ppu.GetHashCode();
                if (this.ControlledProps != null)
                {
                    hashCode = (hashCode * 59) + this.ControlledProps.GetHashCode();
                }
                if (this.ControlledStates != null)
                {
                    hashCode = (hashCode * 59) + this.ControlledStates.GetHashCode();
                }
                if (this.TurnOrderGuids != null)
                {
                    hashCode = (hashCode * 59) + this.TurnOrderGuids.GetHashCode();
                }
                if (this.CameraViews != null)
                {
                    hashCode = (hashCode * 59) + this.CameraViews.GetHashCode();
                }
                if (this.StartingCamera != null)
                {
                    hashCode = (hashCode * 59) + this.StartingCamera.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
