/*
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Animation;
import org.openapitools.client.model.PagedResponseOfAnimations;
import org.openapitools.client.model.PagedResponseOfProp;
import org.openapitools.client.model.PropTransform;
import org.openapitools.client.model.Vector3;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PickupablesApi
 */
@Disabled
public class PickupablesApiTest {

    private final PickupablesApi api = new PickupablesApi();

    /**
     * Retrieve all pickupables
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickupablesGetTest() throws ApiException {
        PagedResponseOfProp response = api.pickupablesGet();
        // TODO: test validations
    }

    /**
     * Get animations for a specific pickupable by GUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickupablesGuidAnimationsGetTest() throws ApiException {
        String guid = null;
        List<PagedResponseOfAnimations> response = api.pickupablesGuidAnimationsGet(guid);
        // TODO: test validations
    }

    /**
     * Update Pickupable Animations
     *
     * Update animations for a specific Pickupable object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickupablesGuidAnimationsPutTest() throws ApiException {
        String guid = null;
        Animation animation = null;
        api.pickupablesGuidAnimationsPut(guid, animation);
        // TODO: test validations
    }

    /**
     * Update Pickupable Chat
     *
     * Update chat for a pickupable item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickupablesGuidChatPostTest() throws ApiException {
        String guid = null;
        String body = null;
        api.pickupablesGuidChatPost(guid, body);
        // TODO: test validations
    }

    /**
     * Delete Pickupable
     *
     * Delete a pickupable item by its GUID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickupablesGuidDeleteTest() throws ApiException {
        String guid = null;
        api.pickupablesGuidDelete(guid);
        // TODO: test validations
    }

    /**
     * Focus everyone on the pickupable
     *
     * Focus everyone on the pickupable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickupablesGuidFocusAllPostTest() throws ApiException {
        String guid = null;
        api.pickupablesGuidFocusAllPost(guid);
        // TODO: test validations
    }

    /**
     * Focus on the pickupable
     *
     * Focus on the pickupable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickupablesGuidFocusPostTest() throws ApiException {
        String guid = null;
        api.pickupablesGuidFocusPost(guid);
        // TODO: test validations
    }

    /**
     * Retrieve a specific pickupable by its GUID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickupablesGuidGetTest() throws ApiException {
        String guid = null;
        String response = api.pickupablesGuidGet(guid);
        // TODO: test validations
    }

    /**
     * Move the pickupable to the target global location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickupablesGuidMoveToGlobalLocationPostTest() throws ApiException {
        String guid = null;
        Vector3 vector3 = null;
        api.pickupablesGuidMoveToGlobalLocationPost(guid, vector3);
        // TODO: test validations
    }

    /**
     * Get Pickupable Transform
     *
     * Retrieve the transform of a specific Pickupable object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickupablesGuidTransformGetTest() throws ApiException {
        String guid = null;
        PropTransform response = api.pickupablesGuidTransformGet(guid);
        // TODO: test validations
    }

    /**
     * Update Pickupable Transform
     *
     * Update the transform of a specific Pickupable object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pickupablesGuidTransformPutTest() throws ApiException {
        String guid = null;
        PropTransform propTransform = null;
        api.pickupablesGuidTransformPut(guid, propTransform);
        // TODO: test validations
    }

}
