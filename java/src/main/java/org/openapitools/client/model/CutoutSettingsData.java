/*
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Quaternion;
import org.openapitools.client.model.Vector3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CutoutSettingsData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-29T21:06:33.968917Z[Etc/UTC]")
public class CutoutSettingsData {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_HIDE_FLOOR = "hideFloor";
  @SerializedName(SERIALIZED_NAME_HIDE_FLOOR)
  private Boolean hideFloor;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Vector3 position;

  public static final String SERIALIZED_NAME_ROTATION = "rotation";
  @SerializedName(SERIALIZED_NAME_ROTATION)
  private Quaternion rotation;

  public static final String SERIALIZED_NAME_SCALE = "scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private Vector3 scale;

  public CutoutSettingsData() {
  }

  public CutoutSettingsData enabled(Boolean enabled) {
    
    this.enabled = enabled;
    return this;
  }

   /**
   * Whether cutout is enabled
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }


  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public CutoutSettingsData hideFloor(Boolean hideFloor) {
    
    this.hideFloor = hideFloor;
    return this;
  }

   /**
   * Whether to hide the floor
   * @return hideFloor
  **/
  @javax.annotation.Nullable
  public Boolean getHideFloor() {
    return hideFloor;
  }


  public void setHideFloor(Boolean hideFloor) {
    this.hideFloor = hideFloor;
  }


  public CutoutSettingsData position(Vector3 position) {
    
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @javax.annotation.Nullable
  public Vector3 getPosition() {
    return position;
  }


  public void setPosition(Vector3 position) {
    this.position = position;
  }


  public CutoutSettingsData rotation(Quaternion rotation) {
    
    this.rotation = rotation;
    return this;
  }

   /**
   * Get rotation
   * @return rotation
  **/
  @javax.annotation.Nullable
  public Quaternion getRotation() {
    return rotation;
  }


  public void setRotation(Quaternion rotation) {
    this.rotation = rotation;
  }


  public CutoutSettingsData scale(Vector3 scale) {
    
    this.scale = scale;
    return this;
  }

   /**
   * Get scale
   * @return scale
  **/
  @javax.annotation.Nullable
  public Vector3 getScale() {
    return scale;
  }


  public void setScale(Vector3 scale) {
    this.scale = scale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CutoutSettingsData cutoutSettingsData = (CutoutSettingsData) o;
    return Objects.equals(this.enabled, cutoutSettingsData.enabled) &&
        Objects.equals(this.hideFloor, cutoutSettingsData.hideFloor) &&
        Objects.equals(this.position, cutoutSettingsData.position) &&
        Objects.equals(this.rotation, cutoutSettingsData.rotation) &&
        Objects.equals(this.scale, cutoutSettingsData.scale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, hideFloor, position, rotation, scale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CutoutSettingsData {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    hideFloor: ").append(toIndentedString(hideFloor)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    rotation: ").append(toIndentedString(rotation)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("hideFloor");
    openapiFields.add("position");
    openapiFields.add("rotation");
    openapiFields.add("scale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CutoutSettingsData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CutoutSettingsData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CutoutSettingsData is not found in the empty JSON string", CutoutSettingsData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CutoutSettingsData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CutoutSettingsData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `position`
      if (jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) {
        Vector3.validateJsonElement(jsonObj.get("position"));
      }
      // validate the optional field `rotation`
      if (jsonObj.get("rotation") != null && !jsonObj.get("rotation").isJsonNull()) {
        Quaternion.validateJsonElement(jsonObj.get("rotation"));
      }
      // validate the optional field `scale`
      if (jsonObj.get("scale") != null && !jsonObj.get("scale").isJsonNull()) {
        Vector3.validateJsonElement(jsonObj.get("scale"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CutoutSettingsData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CutoutSettingsData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CutoutSettingsData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CutoutSettingsData.class));

       return (TypeAdapter<T>) new TypeAdapter<CutoutSettingsData>() {
           @Override
           public void write(JsonWriter out, CutoutSettingsData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CutoutSettingsData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CutoutSettingsData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CutoutSettingsData
  * @throws IOException if the JSON string is invalid with respect to CutoutSettingsData
  */
  public static CutoutSettingsData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CutoutSettingsData.class);
  }

 /**
  * Convert an instance of CutoutSettingsData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

