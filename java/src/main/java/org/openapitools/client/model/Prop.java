/*
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Prop
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-29T21:06:33.968917Z[Etc/UTC]")
public class Prop {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  /**
   * The type of the prop
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_GUID = "guid";
  @SerializedName(SERIALIZED_NAME_GUID)
  private String guid;

  public static final String SERIALIZED_NAME_IN_GAME_NAME = "inGameName";
  @SerializedName(SERIALIZED_NAME_IN_GAME_NAME)
  private String inGameName;

  public static final String SERIALIZED_NAME_PARENT_GUID = "parentGuid";
  @SerializedName(SERIALIZED_NAME_PARENT_GUID)
  private String parentGuid;

  public static final String SERIALIZED_NAME_HOLDER_POS_ID = "holderPosId";
  @SerializedName(SERIALIZED_NAME_HOLDER_POS_ID)
  private Integer holderPosId = -1;

  public static final String SERIALIZED_NAME_IS_LOCKED = "isLocked";
  @SerializedName(SERIALIZED_NAME_IS_LOCKED)
  private Boolean isLocked;

  public static final String SERIALIZED_NAME_IS_HIDDEN = "isHidden";
  @SerializedName(SERIALIZED_NAME_IS_HIDDEN)
  private Boolean isHidden;

  public Prop() {
  }

  public Prop version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * The version of the prop data
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }


  public Prop type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of the prop
   * @return type
  **/
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Prop id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The prefab ID of the prop
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public Prop guid(String guid) {
    
    this.guid = guid;
    return this;
  }

   /**
   * A uniquie identifier
   * @return guid
  **/
  @javax.annotation.Nonnull
  public String getGuid() {
    return guid;
  }


  public void setGuid(String guid) {
    this.guid = guid;
  }


  public Prop inGameName(String inGameName) {
    
    this.inGameName = inGameName;
    return this;
  }

   /**
   * The in-game name of the prop
   * @return inGameName
  **/
  @javax.annotation.Nullable
  public String getInGameName() {
    return inGameName;
  }


  public void setInGameName(String inGameName) {
    this.inGameName = inGameName;
  }


  public Prop parentGuid(String parentGuid) {
    
    this.parentGuid = parentGuid;
    return this;
  }

   /**
   * A uniquie identifier
   * @return parentGuid
  **/
  @javax.annotation.Nullable
  public String getParentGuid() {
    return parentGuid;
  }


  public void setParentGuid(String parentGuid) {
    this.parentGuid = parentGuid;
  }


  public Prop holderPosId(Integer holderPosId) {
    
    this.holderPosId = holderPosId;
    return this;
  }

   /**
   * The holder position ID
   * @return holderPosId
  **/
  @javax.annotation.Nullable
  public Integer getHolderPosId() {
    return holderPosId;
  }


  public void setHolderPosId(Integer holderPosId) {
    this.holderPosId = holderPosId;
  }


  public Prop isLocked(Boolean isLocked) {
    
    this.isLocked = isLocked;
    return this;
  }

   /**
   * Whether the prop is locked
   * @return isLocked
  **/
  @javax.annotation.Nullable
  public Boolean getIsLocked() {
    return isLocked;
  }


  public void setIsLocked(Boolean isLocked) {
    this.isLocked = isLocked;
  }


  public Prop isHidden(Boolean isHidden) {
    
    this.isHidden = isHidden;
    return this;
  }

   /**
   * Whether the prop is hidden
   * @return isHidden
  **/
  @javax.annotation.Nullable
  public Boolean getIsHidden() {
    return isHidden;
  }


  public void setIsHidden(Boolean isHidden) {
    this.isHidden = isHidden;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Prop prop = (Prop) o;
    return Objects.equals(this.version, prop.version) &&
        Objects.equals(this.type, prop.type) &&
        Objects.equals(this.id, prop.id) &&
        Objects.equals(this.guid, prop.guid) &&
        Objects.equals(this.inGameName, prop.inGameName) &&
        Objects.equals(this.parentGuid, prop.parentGuid) &&
        Objects.equals(this.holderPosId, prop.holderPosId) &&
        Objects.equals(this.isLocked, prop.isLocked) &&
        Objects.equals(this.isHidden, prop.isHidden);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, type, id, guid, inGameName, parentGuid, holderPosId, isLocked, isHidden);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Prop {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    guid: ").append(toIndentedString(guid)).append("\n");
    sb.append("    inGameName: ").append(toIndentedString(inGameName)).append("\n");
    sb.append("    parentGuid: ").append(toIndentedString(parentGuid)).append("\n");
    sb.append("    holderPosId: ").append(toIndentedString(holderPosId)).append("\n");
    sb.append("    isLocked: ").append(toIndentedString(isLocked)).append("\n");
    sb.append("    isHidden: ").append(toIndentedString(isHidden)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("type");
    openapiFields.add("id");
    openapiFields.add("guid");
    openapiFields.add("inGameName");
    openapiFields.add("parentGuid");
    openapiFields.add("holderPosId");
    openapiFields.add("isLocked");
    openapiFields.add("isHidden");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("guid");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Prop
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Prop.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Prop is not found in the empty JSON string", Prop.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Prop.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Prop` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Prop.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guid").toString()));
      }
      if ((jsonObj.get("inGameName") != null && !jsonObj.get("inGameName").isJsonNull()) && !jsonObj.get("inGameName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inGameName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inGameName").toString()));
      }
      if ((jsonObj.get("parentGuid") != null && !jsonObj.get("parentGuid").isJsonNull()) && !jsonObj.get("parentGuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentGuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentGuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Prop.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Prop' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Prop> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Prop.class));

       return (TypeAdapter<T>) new TypeAdapter<Prop>() {
           @Override
           public void write(JsonWriter out, Prop value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Prop read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Prop given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Prop
  * @throws IOException if the JSON string is invalid with respect to Prop
  */
  public static Prop fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Prop.class);
  }

 /**
  * Convert an instance of Prop to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

