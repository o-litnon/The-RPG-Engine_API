/*
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Color;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PropCharacterData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-29T20:42:08.286157Z[Etc/UTC]")
public class PropCharacterData {
  public static final String SERIALIZED_NAME_SHOW_HELMET = "showHelmet";
  @SerializedName(SERIALIZED_NAME_SHOW_HELMET)
  private Boolean showHelmet;

  public static final String SERIALIZED_NAME_PARTS = "parts";
  @SerializedName(SERIALIZED_NAME_PARTS)
  private List<String> parts;

  public static final String SERIALIZED_NAME_COLORS = "colors";
  @SerializedName(SERIALIZED_NAME_COLORS)
  private Map<String, Color> colors = new HashMap<>();

  public PropCharacterData() {
  }

  public PropCharacterData showHelmet(Boolean showHelmet) {
    
    this.showHelmet = showHelmet;
    return this;
  }

   /**
   * Whether the helmet is shown
   * @return showHelmet
  **/
  @javax.annotation.Nullable
  public Boolean getShowHelmet() {
    return showHelmet;
  }


  public void setShowHelmet(Boolean showHelmet) {
    this.showHelmet = showHelmet;
  }


  public PropCharacterData parts(List<String> parts) {
    
    this.parts = parts;
    return this;
  }

  public PropCharacterData addPartsItem(String partsItem) {
    if (this.parts == null) {
      this.parts = new ArrayList<>();
    }
    this.parts.add(partsItem);
    return this;
  }

   /**
   * List of character parts
   * @return parts
  **/
  @javax.annotation.Nullable
  public List<String> getParts() {
    return parts;
  }


  public void setParts(List<String> parts) {
    this.parts = parts;
  }


  public PropCharacterData colors(Map<String, Color> colors) {
    
    this.colors = colors;
    return this;
  }

  public PropCharacterData putColorsItem(String key, Color colorsItem) {
    if (this.colors == null) {
      this.colors = new HashMap<>();
    }
    this.colors.put(key, colorsItem);
    return this;
  }

   /**
   * Get colors
   * @return colors
  **/
  @javax.annotation.Nullable
  public Map<String, Color> getColors() {
    return colors;
  }


  public void setColors(Map<String, Color> colors) {
    this.colors = colors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropCharacterData propCharacterData = (PropCharacterData) o;
    return Objects.equals(this.showHelmet, propCharacterData.showHelmet) &&
        Objects.equals(this.parts, propCharacterData.parts) &&
        Objects.equals(this.colors, propCharacterData.colors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(showHelmet, parts, colors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropCharacterData {\n");
    sb.append("    showHelmet: ").append(toIndentedString(showHelmet)).append("\n");
    sb.append("    parts: ").append(toIndentedString(parts)).append("\n");
    sb.append("    colors: ").append(toIndentedString(colors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("showHelmet");
    openapiFields.add("parts");
    openapiFields.add("colors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PropCharacterData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropCharacterData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropCharacterData is not found in the empty JSON string", PropCharacterData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropCharacterData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropCharacterData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("parts") != null && !jsonObj.get("parts").isJsonNull() && !jsonObj.get("parts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parts` to be an array in the JSON string but got `%s`", jsonObj.get("parts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropCharacterData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropCharacterData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropCharacterData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropCharacterData.class));

       return (TypeAdapter<T>) new TypeAdapter<PropCharacterData>() {
           @Override
           public void write(JsonWriter out, PropCharacterData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropCharacterData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PropCharacterData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PropCharacterData
  * @throws IOException if the JSON string is invalid with respect to PropCharacterData
  */
  public static PropCharacterData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropCharacterData.class);
  }

 /**
  * Convert an instance of PropCharacterData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

