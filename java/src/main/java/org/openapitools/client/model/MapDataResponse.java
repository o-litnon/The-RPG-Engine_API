/*
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Atmosphere;
import org.openapitools.client.model.Controllable;
import org.openapitools.client.model.CutoutSettingsData;
import org.openapitools.client.model.PostProcessing;
import org.openapitools.client.model.Settings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MapDataResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-29T20:42:08.286157Z[Etc/UTC]")
public class MapDataResponse {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_LIGHT_ROTATION = "lightRotation";
  @SerializedName(SERIALIZED_NAME_LIGHT_ROTATION)
  private BigDecimal lightRotation;

  public static final String SERIALIZED_NAME_ATMOSPHERE = "atmosphere";
  @SerializedName(SERIALIZED_NAME_ATMOSPHERE)
  private Atmosphere atmosphere;

  public static final String SERIALIZED_NAME_POST_PROCESSING = "postProcessing";
  @SerializedName(SERIALIZED_NAME_POST_PROCESSING)
  private PostProcessing postProcessing;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private Settings settings;

  public static final String SERIALIZED_NAME_CUTOUT_SETTINGS = "cutoutSettings";
  @SerializedName(SERIALIZED_NAME_CUTOUT_SETTINGS)
  private CutoutSettingsData cutoutSettings;

  public static final String SERIALIZED_NAME_PPU = "ppu";
  @SerializedName(SERIALIZED_NAME_PPU)
  private Integer ppu;

  public static final String SERIALIZED_NAME_CONTROLLED_PROPS = "controlledProps";
  @SerializedName(SERIALIZED_NAME_CONTROLLED_PROPS)
  private Controllable controlledProps;

  public static final String SERIALIZED_NAME_CONTROLLED_STATES = "controlledStates";
  @SerializedName(SERIALIZED_NAME_CONTROLLED_STATES)
  private Controllable controlledStates;

  public static final String SERIALIZED_NAME_TURN_ORDER_GUIDS = "turnOrderGuids";
  @SerializedName(SERIALIZED_NAME_TURN_ORDER_GUIDS)
  private List<String> turnOrderGuids;

  public static final String SERIALIZED_NAME_CAMERA_VIEWS = "cameraViews";
  @SerializedName(SERIALIZED_NAME_CAMERA_VIEWS)
  private Controllable cameraViews;

  public static final String SERIALIZED_NAME_STARTING_CAMERA = "startingCamera";
  @SerializedName(SERIALIZED_NAME_STARTING_CAMERA)
  private String startingCamera;

  public MapDataResponse() {
  }

  public MapDataResponse version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * The version of the map data
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }


  public MapDataResponse title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * The title of the map
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    this.title = title;
  }


  public MapDataResponse lightRotation(BigDecimal lightRotation) {
    
    this.lightRotation = lightRotation;
    return this;
  }

   /**
   * The rotation of light
   * @return lightRotation
  **/
  @javax.annotation.Nullable
  public BigDecimal getLightRotation() {
    return lightRotation;
  }


  public void setLightRotation(BigDecimal lightRotation) {
    this.lightRotation = lightRotation;
  }


  public MapDataResponse atmosphere(Atmosphere atmosphere) {
    
    this.atmosphere = atmosphere;
    return this;
  }

   /**
   * Get atmosphere
   * @return atmosphere
  **/
  @javax.annotation.Nullable
  public Atmosphere getAtmosphere() {
    return atmosphere;
  }


  public void setAtmosphere(Atmosphere atmosphere) {
    this.atmosphere = atmosphere;
  }


  public MapDataResponse postProcessing(PostProcessing postProcessing) {
    
    this.postProcessing = postProcessing;
    return this;
  }

   /**
   * Get postProcessing
   * @return postProcessing
  **/
  @javax.annotation.Nullable
  public PostProcessing getPostProcessing() {
    return postProcessing;
  }


  public void setPostProcessing(PostProcessing postProcessing) {
    this.postProcessing = postProcessing;
  }


  public MapDataResponse settings(Settings settings) {
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  public Settings getSettings() {
    return settings;
  }


  public void setSettings(Settings settings) {
    this.settings = settings;
  }


  public MapDataResponse cutoutSettings(CutoutSettingsData cutoutSettings) {
    
    this.cutoutSettings = cutoutSettings;
    return this;
  }

   /**
   * Get cutoutSettings
   * @return cutoutSettings
  **/
  @javax.annotation.Nullable
  public CutoutSettingsData getCutoutSettings() {
    return cutoutSettings;
  }


  public void setCutoutSettings(CutoutSettingsData cutoutSettings) {
    this.cutoutSettings = cutoutSettings;
  }


  public MapDataResponse ppu(Integer ppu) {
    
    this.ppu = ppu;
    return this;
  }

   /**
   * Pixels per unit
   * @return ppu
  **/
  @javax.annotation.Nullable
  public Integer getPpu() {
    return ppu;
  }


  public void setPpu(Integer ppu) {
    this.ppu = ppu;
  }


  public MapDataResponse controlledProps(Controllable controlledProps) {
    
    this.controlledProps = controlledProps;
    return this;
  }

   /**
   * Get controlledProps
   * @return controlledProps
  **/
  @javax.annotation.Nullable
  public Controllable getControlledProps() {
    return controlledProps;
  }


  public void setControlledProps(Controllable controlledProps) {
    this.controlledProps = controlledProps;
  }


  public MapDataResponse controlledStates(Controllable controlledStates) {
    
    this.controlledStates = controlledStates;
    return this;
  }

   /**
   * Get controlledStates
   * @return controlledStates
  **/
  @javax.annotation.Nullable
  public Controllable getControlledStates() {
    return controlledStates;
  }


  public void setControlledStates(Controllable controlledStates) {
    this.controlledStates = controlledStates;
  }


  public MapDataResponse turnOrderGuids(List<String> turnOrderGuids) {
    
    this.turnOrderGuids = turnOrderGuids;
    return this;
  }

  public MapDataResponse addTurnOrderGuidsItem(String turnOrderGuidsItem) {
    if (this.turnOrderGuids == null) {
      this.turnOrderGuids = new ArrayList<>();
    }
    this.turnOrderGuids.add(turnOrderGuidsItem);
    return this;
  }

   /**
   * Get turnOrderGuids
   * @return turnOrderGuids
  **/
  @javax.annotation.Nullable
  public List<String> getTurnOrderGuids() {
    return turnOrderGuids;
  }


  public void setTurnOrderGuids(List<String> turnOrderGuids) {
    this.turnOrderGuids = turnOrderGuids;
  }


  public MapDataResponse cameraViews(Controllable cameraViews) {
    
    this.cameraViews = cameraViews;
    return this;
  }

   /**
   * Get cameraViews
   * @return cameraViews
  **/
  @javax.annotation.Nullable
  public Controllable getCameraViews() {
    return cameraViews;
  }


  public void setCameraViews(Controllable cameraViews) {
    this.cameraViews = cameraViews;
  }


  public MapDataResponse startingCamera(String startingCamera) {
    
    this.startingCamera = startingCamera;
    return this;
  }

   /**
   * A uniquie identifier
   * @return startingCamera
  **/
  @javax.annotation.Nullable
  public String getStartingCamera() {
    return startingCamera;
  }


  public void setStartingCamera(String startingCamera) {
    this.startingCamera = startingCamera;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MapDataResponse mapDataResponse = (MapDataResponse) o;
    return Objects.equals(this.version, mapDataResponse.version) &&
        Objects.equals(this.title, mapDataResponse.title) &&
        Objects.equals(this.lightRotation, mapDataResponse.lightRotation) &&
        Objects.equals(this.atmosphere, mapDataResponse.atmosphere) &&
        Objects.equals(this.postProcessing, mapDataResponse.postProcessing) &&
        Objects.equals(this.settings, mapDataResponse.settings) &&
        Objects.equals(this.cutoutSettings, mapDataResponse.cutoutSettings) &&
        Objects.equals(this.ppu, mapDataResponse.ppu) &&
        Objects.equals(this.controlledProps, mapDataResponse.controlledProps) &&
        Objects.equals(this.controlledStates, mapDataResponse.controlledStates) &&
        Objects.equals(this.turnOrderGuids, mapDataResponse.turnOrderGuids) &&
        Objects.equals(this.cameraViews, mapDataResponse.cameraViews) &&
        Objects.equals(this.startingCamera, mapDataResponse.startingCamera);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, title, lightRotation, atmosphere, postProcessing, settings, cutoutSettings, ppu, controlledProps, controlledStates, turnOrderGuids, cameraViews, startingCamera);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MapDataResponse {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    lightRotation: ").append(toIndentedString(lightRotation)).append("\n");
    sb.append("    atmosphere: ").append(toIndentedString(atmosphere)).append("\n");
    sb.append("    postProcessing: ").append(toIndentedString(postProcessing)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    cutoutSettings: ").append(toIndentedString(cutoutSettings)).append("\n");
    sb.append("    ppu: ").append(toIndentedString(ppu)).append("\n");
    sb.append("    controlledProps: ").append(toIndentedString(controlledProps)).append("\n");
    sb.append("    controlledStates: ").append(toIndentedString(controlledStates)).append("\n");
    sb.append("    turnOrderGuids: ").append(toIndentedString(turnOrderGuids)).append("\n");
    sb.append("    cameraViews: ").append(toIndentedString(cameraViews)).append("\n");
    sb.append("    startingCamera: ").append(toIndentedString(startingCamera)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("title");
    openapiFields.add("lightRotation");
    openapiFields.add("atmosphere");
    openapiFields.add("postProcessing");
    openapiFields.add("settings");
    openapiFields.add("cutoutSettings");
    openapiFields.add("ppu");
    openapiFields.add("controlledProps");
    openapiFields.add("controlledStates");
    openapiFields.add("turnOrderGuids");
    openapiFields.add("cameraViews");
    openapiFields.add("startingCamera");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MapDataResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MapDataResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MapDataResponse is not found in the empty JSON string", MapDataResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MapDataResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MapDataResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `atmosphere`
      if (jsonObj.get("atmosphere") != null && !jsonObj.get("atmosphere").isJsonNull()) {
        Atmosphere.validateJsonElement(jsonObj.get("atmosphere"));
      }
      // validate the optional field `postProcessing`
      if (jsonObj.get("postProcessing") != null && !jsonObj.get("postProcessing").isJsonNull()) {
        PostProcessing.validateJsonElement(jsonObj.get("postProcessing"));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        Settings.validateJsonElement(jsonObj.get("settings"));
      }
      // validate the optional field `cutoutSettings`
      if (jsonObj.get("cutoutSettings") != null && !jsonObj.get("cutoutSettings").isJsonNull()) {
        CutoutSettingsData.validateJsonElement(jsonObj.get("cutoutSettings"));
      }
      // validate the optional field `controlledProps`
      if (jsonObj.get("controlledProps") != null && !jsonObj.get("controlledProps").isJsonNull()) {
        Controllable.validateJsonElement(jsonObj.get("controlledProps"));
      }
      // validate the optional field `controlledStates`
      if (jsonObj.get("controlledStates") != null && !jsonObj.get("controlledStates").isJsonNull()) {
        Controllable.validateJsonElement(jsonObj.get("controlledStates"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("turnOrderGuids") != null && !jsonObj.get("turnOrderGuids").isJsonNull() && !jsonObj.get("turnOrderGuids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `turnOrderGuids` to be an array in the JSON string but got `%s`", jsonObj.get("turnOrderGuids").toString()));
      }
      // validate the optional field `cameraViews`
      if (jsonObj.get("cameraViews") != null && !jsonObj.get("cameraViews").isJsonNull()) {
        Controllable.validateJsonElement(jsonObj.get("cameraViews"));
      }
      if ((jsonObj.get("startingCamera") != null && !jsonObj.get("startingCamera").isJsonNull()) && !jsonObj.get("startingCamera").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startingCamera` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startingCamera").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MapDataResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MapDataResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MapDataResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MapDataResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MapDataResponse>() {
           @Override
           public void write(JsonWriter out, MapDataResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MapDataResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MapDataResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MapDataResponse
  * @throws IOException if the JSON string is invalid with respect to MapDataResponse
  */
  public static MapDataResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MapDataResponse.class);
  }

 /**
  * Convert an instance of MapDataResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

