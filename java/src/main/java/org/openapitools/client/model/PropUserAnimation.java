/*
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.PropTransform;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PropUserAnimation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-10-29T20:42:08.286157Z[Etc/UTC]")
public class PropUserAnimation {
  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START = "start";
  @SerializedName(SERIALIZED_NAME_START)
  private PropTransform start;

  public static final String SERIALIZED_NAME_END = "end";
  @SerializedName(SERIALIZED_NAME_END)
  private PropTransform end;

  public static final String SERIALIZED_NAME_TO_START = "toStart";
  @SerializedName(SERIALIZED_NAME_TO_START)
  private Boolean toStart;

  public static final String SERIALIZED_NAME_PING_PONG = "pingPong";
  @SerializedName(SERIALIZED_NAME_PING_PONG)
  private Boolean pingPong;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_START_DELAY = "startDelay";
  @SerializedName(SERIALIZED_NAME_START_DELAY)
  private BigDecimal startDelay;

  public PropUserAnimation() {
  }

  public PropUserAnimation version(Integer version) {
    
    this.version = version;
    return this;
  }

   /**
   * The version of the user animation data
   * @return version
  **/
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }


  public void setVersion(Integer version) {
    this.version = version;
  }


  public PropUserAnimation name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the user animation
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public PropUserAnimation start(PropTransform start) {
    
    this.start = start;
    return this;
  }

   /**
   * Get start
   * @return start
  **/
  @javax.annotation.Nullable
  public PropTransform getStart() {
    return start;
  }


  public void setStart(PropTransform start) {
    this.start = start;
  }


  public PropUserAnimation end(PropTransform end) {
    
    this.end = end;
    return this;
  }

   /**
   * Get end
   * @return end
  **/
  @javax.annotation.Nullable
  public PropTransform getEnd() {
    return end;
  }


  public void setEnd(PropTransform end) {
    this.end = end;
  }


  public PropUserAnimation toStart(Boolean toStart) {
    
    this.toStart = toStart;
    return this;
  }

   /**
   * Whether the animation goes to the start
   * @return toStart
  **/
  @javax.annotation.Nullable
  public Boolean getToStart() {
    return toStart;
  }


  public void setToStart(Boolean toStart) {
    this.toStart = toStart;
  }


  public PropUserAnimation pingPong(Boolean pingPong) {
    
    this.pingPong = pingPong;
    return this;
  }

   /**
   * Whether the animation is ping-pong
   * @return pingPong
  **/
  @javax.annotation.Nullable
  public Boolean getPingPong() {
    return pingPong;
  }


  public void setPingPong(Boolean pingPong) {
    this.pingPong = pingPong;
  }


  public PropUserAnimation duration(BigDecimal duration) {
    
    this.duration = duration;
    return this;
  }

   /**
   * The duration of the animation
   * @return duration
  **/
  @javax.annotation.Nullable
  public BigDecimal getDuration() {
    return duration;
  }


  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public PropUserAnimation startDelay(BigDecimal startDelay) {
    
    this.startDelay = startDelay;
    return this;
  }

   /**
   * The start delay of the animation
   * @return startDelay
  **/
  @javax.annotation.Nullable
  public BigDecimal getStartDelay() {
    return startDelay;
  }


  public void setStartDelay(BigDecimal startDelay) {
    this.startDelay = startDelay;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropUserAnimation propUserAnimation = (PropUserAnimation) o;
    return Objects.equals(this.version, propUserAnimation.version) &&
        Objects.equals(this.name, propUserAnimation.name) &&
        Objects.equals(this.start, propUserAnimation.start) &&
        Objects.equals(this.end, propUserAnimation.end) &&
        Objects.equals(this.toStart, propUserAnimation.toStart) &&
        Objects.equals(this.pingPong, propUserAnimation.pingPong) &&
        Objects.equals(this.duration, propUserAnimation.duration) &&
        Objects.equals(this.startDelay, propUserAnimation.startDelay);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, name, start, end, toStart, pingPong, duration, startDelay);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropUserAnimation {\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    end: ").append(toIndentedString(end)).append("\n");
    sb.append("    toStart: ").append(toIndentedString(toStart)).append("\n");
    sb.append("    pingPong: ").append(toIndentedString(pingPong)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    startDelay: ").append(toIndentedString(startDelay)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("version");
    openapiFields.add("name");
    openapiFields.add("start");
    openapiFields.add("end");
    openapiFields.add("toStart");
    openapiFields.add("pingPong");
    openapiFields.add("duration");
    openapiFields.add("startDelay");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PropUserAnimation
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PropUserAnimation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PropUserAnimation is not found in the empty JSON string", PropUserAnimation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PropUserAnimation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PropUserAnimation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `start`
      if (jsonObj.get("start") != null && !jsonObj.get("start").isJsonNull()) {
        PropTransform.validateJsonElement(jsonObj.get("start"));
      }
      // validate the optional field `end`
      if (jsonObj.get("end") != null && !jsonObj.get("end").isJsonNull()) {
        PropTransform.validateJsonElement(jsonObj.get("end"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PropUserAnimation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PropUserAnimation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PropUserAnimation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PropUserAnimation.class));

       return (TypeAdapter<T>) new TypeAdapter<PropUserAnimation>() {
           @Override
           public void write(JsonWriter out, PropUserAnimation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PropUserAnimation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PropUserAnimation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PropUserAnimation
  * @throws IOException if the JSON string is invalid with respect to PropUserAnimation
  */
  public static PropUserAnimation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PropUserAnimation.class);
  }

 /**
  * Convert an instance of PropUserAnimation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

