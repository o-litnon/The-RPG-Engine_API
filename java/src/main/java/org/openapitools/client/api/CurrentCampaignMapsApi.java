/*
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MapDataResponse;
import org.openapitools.client.model.PagedResponseOfProp;
import org.openapitools.client.model.PagedResponseOfString;
import org.openapitools.client.model.Prop;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CurrentCampaignMapsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CurrentCampaignMapsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CurrentCampaignMapsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for currentCampaignMapsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of map names </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CurrentCampaign/Maps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentCampaignMapsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return currentCampaignMapsGetCall(_callback);

    }

    /**
     * Get a list of map names
     * 
     * @return PagedResponseOfString
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of map names </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public PagedResponseOfString currentCampaignMapsGet() throws ApiException {
        ApiResponse<PagedResponseOfString> localVarResp = currentCampaignMapsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get a list of map names
     * 
     * @return ApiResponse&lt;PagedResponseOfString&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of map names </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedResponseOfString> currentCampaignMapsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = currentCampaignMapsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PagedResponseOfString>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of map names (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of map names </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsGetAsync(final ApiCallback<PagedResponseOfString> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentCampaignMapsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PagedResponseOfString>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currentCampaignMapsMapNameFilePathGet
     * @param mapName The name of the map to get the file path of (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file path of the given map </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Map not loaded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNameFilePathGetCall(String mapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CurrentCampaign/Maps/{mapName}/FilePath"
            .replace("{" + "mapName" + "}", localVarApiClient.escapeString(mapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentCampaignMapsMapNameFilePathGetValidateBeforeCall(String mapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mapName' is set
        if (mapName == null) {
            throw new ApiException("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNameFilePathGet(Async)");
        }

        return currentCampaignMapsMapNameFilePathGetCall(mapName, _callback);

    }

    /**
     * Retrieve file path of the given map
     * 
     * @param mapName The name of the map to get the file path of (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file path of the given map </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Map not loaded </td><td>  -  </td></tr>
     </table>
     */
    public String currentCampaignMapsMapNameFilePathGet(String mapName) throws ApiException {
        ApiResponse<String> localVarResp = currentCampaignMapsMapNameFilePathGetWithHttpInfo(mapName);
        return localVarResp.getData();
    }

    /**
     * Retrieve file path of the given map
     * 
     * @param mapName The name of the map to get the file path of (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file path of the given map </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Map not loaded </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> currentCampaignMapsMapNameFilePathGetWithHttpInfo(String mapName) throws ApiException {
        okhttp3.Call localVarCall = currentCampaignMapsMapNameFilePathGetValidateBeforeCall(mapName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve file path of the given map (asynchronously)
     * 
     * @param mapName The name of the map to get the file path of (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The file path of the given map </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Map not loaded </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNameFilePathGetAsync(String mapName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentCampaignMapsMapNameFilePathGetValidateBeforeCall(mapName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currentCampaignMapsMapNameGet
     * @param mapName The name of the map to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Map details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNameGetCall(String mapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CurrentCampaign/Maps/{mapName}"
            .replace("{" + "mapName" + "}", localVarApiClient.escapeString(mapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentCampaignMapsMapNameGetValidateBeforeCall(String mapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mapName' is set
        if (mapName == null) {
            throw new ApiException("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNameGet(Async)");
        }

        return currentCampaignMapsMapNameGetCall(mapName, _callback);

    }

    /**
     * Get map details by name
     * 
     * @param mapName The name of the map to retrieve (required)
     * @return MapDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Map details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
     </table>
     */
    public MapDataResponse currentCampaignMapsMapNameGet(String mapName) throws ApiException {
        ApiResponse<MapDataResponse> localVarResp = currentCampaignMapsMapNameGetWithHttpInfo(mapName);
        return localVarResp.getData();
    }

    /**
     * Get map details by name
     * 
     * @param mapName The name of the map to retrieve (required)
     * @return ApiResponse&lt;MapDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Map details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MapDataResponse> currentCampaignMapsMapNameGetWithHttpInfo(String mapName) throws ApiException {
        okhttp3.Call localVarCall = currentCampaignMapsMapNameGetValidateBeforeCall(mapName, null);
        Type localVarReturnType = new TypeToken<MapDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get map details by name (asynchronously)
     * 
     * @param mapName The name of the map to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Map details </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNameGetAsync(String mapName, final ApiCallback<MapDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentCampaignMapsMapNameGetValidateBeforeCall(mapName, _callback);
        Type localVarReturnType = new TypeToken<MapDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currentCampaignMapsMapNameLoadIntoMemoryPost
     * @param mapName The name of the map to load in to memory (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNameLoadIntoMemoryPostCall(String mapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CurrentCampaign/Maps/{mapName}/LoadIntoMemory"
            .replace("{" + "mapName" + "}", localVarApiClient.escapeString(mapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentCampaignMapsMapNameLoadIntoMemoryPostValidateBeforeCall(String mapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mapName' is set
        if (mapName == null) {
            throw new ApiException("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNameLoadIntoMemoryPost(Async)");
        }

        return currentCampaignMapsMapNameLoadIntoMemoryPostCall(mapName, _callback);

    }

    /**
     * Load a map into memory
     * Load a map if it exists
     * @param mapName The name of the map to load in to memory (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void currentCampaignMapsMapNameLoadIntoMemoryPost(String mapName) throws ApiException {
        currentCampaignMapsMapNameLoadIntoMemoryPostWithHttpInfo(mapName);
    }

    /**
     * Load a map into memory
     * Load a map if it exists
     * @param mapName The name of the map to load in to memory (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> currentCampaignMapsMapNameLoadIntoMemoryPostWithHttpInfo(String mapName) throws ApiException {
        okhttp3.Call localVarCall = currentCampaignMapsMapNameLoadIntoMemoryPostValidateBeforeCall(mapName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Load a map into memory (asynchronously)
     * Load a map if it exists
     * @param mapName The name of the map to load in to memory (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNameLoadIntoMemoryPostAsync(String mapName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentCampaignMapsMapNameLoadIntoMemoryPostValidateBeforeCall(mapName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for currentCampaignMapsMapNameOpenPost
     * @param mapName The name of the map to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNameOpenPostCall(String mapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CurrentCampaign/Maps/{mapName}/Open"
            .replace("{" + "mapName" + "}", localVarApiClient.escapeString(mapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentCampaignMapsMapNameOpenPostValidateBeforeCall(String mapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mapName' is set
        if (mapName == null) {
            throw new ApiException("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNameOpenPost(Async)");
        }

        return currentCampaignMapsMapNameOpenPostCall(mapName, _callback);

    }

    /**
     * Load a map
     * Load a map if it exists
     * @param mapName The name of the map to retrieve (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void currentCampaignMapsMapNameOpenPost(String mapName) throws ApiException {
        currentCampaignMapsMapNameOpenPostWithHttpInfo(mapName);
    }

    /**
     * Load a map
     * Load a map if it exists
     * @param mapName The name of the map to retrieve (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> currentCampaignMapsMapNameOpenPostWithHttpInfo(String mapName) throws ApiException {
        okhttp3.Call localVarCall = currentCampaignMapsMapNameOpenPostValidateBeforeCall(mapName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Load a map (asynchronously)
     * Load a map if it exists
     * @param mapName The name of the map to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNameOpenPostAsync(String mapName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentCampaignMapsMapNameOpenPostValidateBeforeCall(mapName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for currentCampaignMapsMapNamePickupablesGet
     * @param mapName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with pickupables. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNamePickupablesGetCall(String mapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CurrentCampaign/Maps/{mapName}/Pickupables"
            .replace("{" + "mapName" + "}", localVarApiClient.escapeString(mapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentCampaignMapsMapNamePickupablesGetValidateBeforeCall(String mapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mapName' is set
        if (mapName == null) {
            throw new ApiException("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNamePickupablesGet(Async)");
        }

        return currentCampaignMapsMapNamePickupablesGetCall(mapName, _callback);

    }

    /**
     * Get pickupables for a specific map.
     * 
     * @param mapName  (required)
     * @return List&lt;PagedResponseOfProp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with pickupables. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
     </table>
     */
    public List<PagedResponseOfProp> currentCampaignMapsMapNamePickupablesGet(String mapName) throws ApiException {
        ApiResponse<List<PagedResponseOfProp>> localVarResp = currentCampaignMapsMapNamePickupablesGetWithHttpInfo(mapName);
        return localVarResp.getData();
    }

    /**
     * Get pickupables for a specific map.
     * 
     * @param mapName  (required)
     * @return ApiResponse&lt;List&lt;PagedResponseOfProp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with pickupables. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PagedResponseOfProp>> currentCampaignMapsMapNamePickupablesGetWithHttpInfo(String mapName) throws ApiException {
        okhttp3.Call localVarCall = currentCampaignMapsMapNamePickupablesGetValidateBeforeCall(mapName, null);
        Type localVarReturnType = new TypeToken<List<PagedResponseOfProp>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pickupables for a specific map. (asynchronously)
     * 
     * @param mapName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with pickupables. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNamePickupablesGetAsync(String mapName, final ApiCallback<List<PagedResponseOfProp>> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentCampaignMapsMapNamePickupablesGetValidateBeforeCall(mapName, _callback);
        Type localVarReturnType = new TypeToken<List<PagedResponseOfProp>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currentCampaignMapsMapNamePickupablesPost
     * @param mapName The name of the map where the pickupables should be created. (required)
     * @param prop The collection of pickupable items to create. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNamePickupablesPostCall(String mapName, List<Prop> prop, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = prop;

        // create path and map variables
        String localVarPath = "/CurrentCampaign/Maps/{mapName}/Pickupables"
            .replace("{" + "mapName" + "}", localVarApiClient.escapeString(mapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentCampaignMapsMapNamePickupablesPostValidateBeforeCall(String mapName, List<Prop> prop, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mapName' is set
        if (mapName == null) {
            throw new ApiException("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNamePickupablesPost(Async)");
        }

        // verify the required parameter 'prop' is set
        if (prop == null) {
            throw new ApiException("Missing the required parameter 'prop' when calling currentCampaignMapsMapNamePickupablesPost(Async)");
        }

        return currentCampaignMapsMapNamePickupablesPostCall(mapName, prop, _callback);

    }

    /**
     * Create Pickupables
     * Create new pickupable items for a specific map.
     * @param mapName The name of the map where the pickupables should be created. (required)
     * @param prop The collection of pickupable items to create. (required)
     * @return List&lt;Prop&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<Prop> currentCampaignMapsMapNamePickupablesPost(String mapName, List<Prop> prop) throws ApiException {
        ApiResponse<List<Prop>> localVarResp = currentCampaignMapsMapNamePickupablesPostWithHttpInfo(mapName, prop);
        return localVarResp.getData();
    }

    /**
     * Create Pickupables
     * Create new pickupable items for a specific map.
     * @param mapName The name of the map where the pickupables should be created. (required)
     * @param prop The collection of pickupable items to create. (required)
     * @return ApiResponse&lt;List&lt;Prop&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Prop>> currentCampaignMapsMapNamePickupablesPostWithHttpInfo(String mapName, List<Prop> prop) throws ApiException {
        okhttp3.Call localVarCall = currentCampaignMapsMapNamePickupablesPostValidateBeforeCall(mapName, prop, null);
        Type localVarReturnType = new TypeToken<List<Prop>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Pickupables (asynchronously)
     * Create new pickupable items for a specific map.
     * @param mapName The name of the map where the pickupables should be created. (required)
     * @param prop The collection of pickupable items to create. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNamePickupablesPostAsync(String mapName, List<Prop> prop, final ApiCallback<List<Prop>> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentCampaignMapsMapNamePickupablesPostValidateBeforeCall(mapName, prop, _callback);
        Type localVarReturnType = new TypeToken<List<Prop>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for currentCampaignMapsMapNameSendAllPlayersPost
     * @param mapName The name of the map to retrieve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNameSendAllPlayersPostCall(String mapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CurrentCampaign/Maps/{mapName}/SendAllPlayers"
            .replace("{" + "mapName" + "}", localVarApiClient.escapeString(mapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentCampaignMapsMapNameSendAllPlayersPostValidateBeforeCall(String mapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mapName' is set
        if (mapName == null) {
            throw new ApiException("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNameSendAllPlayersPost(Async)");
        }

        return currentCampaignMapsMapNameSendAllPlayersPostCall(mapName, _callback);

    }

    /**
     * Sends all players to a map
     * Sends all players to a map if it exists
     * @param mapName The name of the map to retrieve (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public void currentCampaignMapsMapNameSendAllPlayersPost(String mapName) throws ApiException {
        currentCampaignMapsMapNameSendAllPlayersPostWithHttpInfo(mapName);
    }

    /**
     * Sends all players to a map
     * Sends all players to a map if it exists
     * @param mapName The name of the map to retrieve (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> currentCampaignMapsMapNameSendAllPlayersPostWithHttpInfo(String mapName) throws ApiException {
        okhttp3.Call localVarCall = currentCampaignMapsMapNameSendAllPlayersPostValidateBeforeCall(mapName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Sends all players to a map (asynchronously)
     * Sends all players to a map if it exists
     * @param mapName The name of the map to retrieve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNameSendAllPlayersPostAsync(String mapName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentCampaignMapsMapNameSendAllPlayersPostValidateBeforeCall(mapName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for currentCampaignMapsMapNameTerrainDataGet
     * @param mapName  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with terrain data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNameTerrainDataGetCall(String mapName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/CurrentCampaign/Maps/{mapName}/TerrainData"
            .replace("{" + "mapName" + "}", localVarApiClient.escapeString(mapName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call currentCampaignMapsMapNameTerrainDataGetValidateBeforeCall(String mapName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'mapName' is set
        if (mapName == null) {
            throw new ApiException("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNameTerrainDataGet(Async)");
        }

        return currentCampaignMapsMapNameTerrainDataGetCall(mapName, _callback);

    }

    /**
     * Get terrain data for a specific map.
     * 
     * @param mapName  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with terrain data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
     </table>
     */
    public Object currentCampaignMapsMapNameTerrainDataGet(String mapName) throws ApiException {
        ApiResponse<Object> localVarResp = currentCampaignMapsMapNameTerrainDataGetWithHttpInfo(mapName);
        return localVarResp.getData();
    }

    /**
     * Get terrain data for a specific map.
     * 
     * @param mapName  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with terrain data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> currentCampaignMapsMapNameTerrainDataGetWithHttpInfo(String mapName) throws ApiException {
        okhttp3.Call localVarCall = currentCampaignMapsMapNameTerrainDataGetValidateBeforeCall(mapName, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get terrain data for a specific map. (asynchronously)
     * 
     * @param mapName  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response with terrain data. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Map not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call currentCampaignMapsMapNameTerrainDataGetAsync(String mapName, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = currentCampaignMapsMapNameTerrainDataGetValidateBeforeCall(mapName, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
