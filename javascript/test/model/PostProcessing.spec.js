/**
 * The RPG Engine API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheRpgEngineApi);
  }
}(this, function(expect, TheRpgEngineApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheRpgEngineApi.PostProcessing();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PostProcessing', function() {
    it('should create an instance of PostProcessing', function() {
      // uncomment below and update the code to test PostProcessing
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be.a(TheRpgEngineApi.PostProcessing);
    });

    it('should have the property tiltShiftBlurAmount (base name: "tiltShiftBlurAmount")', function() {
      // uncomment below and update the code to test the property tiltShiftBlurAmount
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property edgeDetectionEnabled (base name: "edgeDetectionEnabled")', function() {
      // uncomment below and update the code to test the property edgeDetectionEnabled
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property edgeDetectionColor (base name: "edgeDetectionColor")', function() {
      // uncomment below and update the code to test the property edgeDetectionColor
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property ditheringThreshold (base name: "ditheringThreshold")', function() {
      // uncomment below and update the code to test the property ditheringThreshold
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property tubeDistortionStrength (base name: "tubeDistortionStrength")', function() {
      // uncomment below and update the code to test the property tubeDistortionStrength
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property pixelizationResolution (base name: "pixelizationResolution")', function() {
      // uncomment below and update the code to test the property pixelizationResolution
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property colorSplitStrength (base name: "colorSplitStrength")', function() {
      // uncomment below and update the code to test the property colorSplitStrength
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property waterRipplesStrength (base name: "waterRipplesStrength")', function() {
      // uncomment below and update the code to test the property waterRipplesStrength
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property waterRipplesSpeed (base name: "waterRipplesSpeed")', function() {
      // uncomment below and update the code to test the property waterRipplesSpeed
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property sketchEnabled (base name: "sketchEnabled")', function() {
      // uncomment below and update the code to test the property sketchEnabled
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property radialBlurAmount (base name: "radialBlurAmount")', function() {
      // uncomment below and update the code to test the property radialBlurAmount
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property bloomThreshhold (base name: "bloomThreshhold")', function() {
      // uncomment below and update the code to test the property bloomThreshhold
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property bloomIntensity (base name: "bloomIntensity")', function() {
      // uncomment below and update the code to test the property bloomIntensity
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property vignetteIntensity (base name: "vignetteIntensity")', function() {
      // uncomment below and update the code to test the property vignetteIntensity
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property vignetteColor (base name: "vignetteColor")', function() {
      // uncomment below and update the code to test the property vignetteColor
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property postExposure (base name: "postExposure")', function() {
      // uncomment below and update the code to test the property postExposure
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property saturation (base name: "saturation")', function() {
      // uncomment below and update the code to test the property saturation
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property hue (base name: "hue")', function() {
      // uncomment below and update the code to test the property hue
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property temperature (base name: "temperature")', function() {
      // uncomment below and update the code to test the property temperature
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property sharpenEnabled (base name: "sharpenEnabled")', function() {
      // uncomment below and update the code to test the property sharpenEnabled
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property blackBars (base name: "blackBars")', function() {
      // uncomment below and update the code to test the property blackBars
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property scanLinesEnabled (base name: "ScanLinesEnabled")', function() {
      // uncomment below and update the code to test the property scanLinesEnabled
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property scanlinesAmount (base name: "scanlinesAmount")', function() {
      // uncomment below and update the code to test the property scanlinesAmount
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

    it('should have the property scanlinesSpeed (base name: "scanlinesSpeed")', function() {
      // uncomment below and update the code to test the property scanlinesSpeed
      //var instance = new TheRpgEngineApi.PostProcessing();
      //expect(instance).to.be();
    });

  });

}));
