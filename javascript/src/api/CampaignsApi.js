/**
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PagedResponseOfString from '../model/PagedResponseOfString';

/**
* Campaigns service.
* @module api/CampaignsApi
* @version 1.0.0
*/
export default class CampaignsApi {

    /**
    * Constructs a new CampaignsApi. 
    * @alias module:api/CampaignsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the campaignsCampaignDelete operation.
     * @callback module:api/CampaignsApi~campaignsCampaignDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Campaign
     * Delete a campaign.
     * @param {String} campaign The name of the campaign to delete.
     * @param {module:api/CampaignsApi~campaignsCampaignDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    campaignsCampaignDelete(campaign, callback) {
      let postBody = null;
      // verify the required parameter 'campaign' is set
      if (campaign === undefined || campaign === null) {
        throw new Error("Missing the required parameter 'campaign' when calling campaignsCampaignDelete");
      }

      let pathParams = {
        'campaign': campaign
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Campaigns/{campaign}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsCampaignMapsGet operation.
     * @callback module:api/CampaignsApi~campaignsCampaignMapsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResponseOfString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Maps of a Campaign
     * Get a list of maps for a specific campaign.
     * @param {String} campaign The name of the campaign to retrieve maps from.
     * @param {module:api/CampaignsApi~campaignsCampaignMapsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResponseOfString}
     */
    campaignsCampaignMapsGet(campaign, callback) {
      let postBody = null;
      // verify the required parameter 'campaign' is set
      if (campaign === undefined || campaign === null) {
        throw new Error("Missing the required parameter 'campaign' when calling campaignsCampaignMapsGet");
      }

      let pathParams = {
        'campaign': campaign
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResponseOfString;
      return this.apiClient.callApi(
        '/Campaigns/{campaign}/Maps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsCampaignOpenPost operation.
     * @callback module:api/CampaignsApi~campaignsCampaignOpenPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load Campaign
     * Load a campaign and open it.
     * @param {String} campaign The name of the campaign to load.
     * @param {module:api/CampaignsApi~campaignsCampaignOpenPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    campaignsCampaignOpenPost(campaign, callback) {
      let postBody = null;
      // verify the required parameter 'campaign' is set
      if (campaign === undefined || campaign === null) {
        throw new Error("Missing the required parameter 'campaign' when calling campaignsCampaignOpenPost");
      }

      let pathParams = {
        'campaign': campaign
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Campaigns/{campaign}/Open', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsCampaignPost operation.
     * @callback module:api/CampaignsApi~campaignsCampaignPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Campaign
     * Create a campaign.
     * @param {String} campaign The name of the campaign to load.
     * @param {module:api/CampaignsApi~campaignsCampaignPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    campaignsCampaignPost(campaign, callback) {
      let postBody = null;
      // verify the required parameter 'campaign' is set
      if (campaign === undefined || campaign === null) {
        throw new Error("Missing the required parameter 'campaign' when calling campaignsCampaignPost");
      }

      let pathParams = {
        'campaign': campaign
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Campaigns/{campaign}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the campaignsGet operation.
     * @callback module:api/CampaignsApi~campaignsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResponseOfString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Campaigns
     * Get a list of available campaigns.
     * @param {module:api/CampaignsApi~campaignsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResponseOfString}
     */
    campaignsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResponseOfString;
      return this.apiClient.callApi(
        '/Campaigns', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
