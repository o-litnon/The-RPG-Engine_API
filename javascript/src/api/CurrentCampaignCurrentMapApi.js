/**
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MapDataResponse from '../model/MapDataResponse';
import PagedResponseOfProp from '../model/PagedResponseOfProp';
import PagedResponseOfTerrainDataPoint from '../model/PagedResponseOfTerrainDataPoint';
import Prop from '../model/Prop';

/**
* CurrentCampaignCurrentMap service.
* @module api/CurrentCampaignCurrentMapApi
* @version 1.0.0
*/
export default class CurrentCampaignCurrentMapApi {

    /**
    * Constructs a new CurrentCampaignCurrentMapApi. 
    * @alias module:api/CurrentCampaignCurrentMapApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the currentCampaignCurrentMapFilePathGet operation.
     * @callback module:api/CurrentCampaignCurrentMapApi~currentCampaignCurrentMapFilePathGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve file path of the current map
     * @param {module:api/CurrentCampaignCurrentMapApi~currentCampaignCurrentMapFilePathGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    currentCampaignCurrentMapFilePathGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/CurrentCampaign/CurrentMap/FilePath', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignCurrentMapGet operation.
     * @callback module:api/CurrentCampaignCurrentMapApi~currentCampaignCurrentMapGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MapDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve current map data
     * @param {module:api/CurrentCampaignCurrentMapApi~currentCampaignCurrentMapGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MapDataResponse}
     */
    currentCampaignCurrentMapGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = MapDataResponse;
      return this.apiClient.callApi(
        '/CurrentCampaign/CurrentMap', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignCurrentMapPickupablesGet operation.
     * @callback module:api/CurrentCampaignCurrentMapApi~currentCampaignCurrentMapPickupablesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResponseOfProp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve pickupables on the current map
     * @param {module:api/CurrentCampaignCurrentMapApi~currentCampaignCurrentMapPickupablesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResponseOfProp}
     */
    currentCampaignCurrentMapPickupablesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = PagedResponseOfProp;
      return this.apiClient.callApi(
        '/CurrentCampaign/CurrentMap/Pickupables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignCurrentMapPickupablesPost operation.
     * @callback module:api/CurrentCampaignCurrentMapApi~currentCampaignCurrentMapPickupablesPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Prop>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Pickupables
     * Create new pickupable items for the current map.
     * @param {Array.<module:model/Prop>} prop The collection of pickupable items to create.
     * @param {module:api/CurrentCampaignCurrentMapApi~currentCampaignCurrentMapPickupablesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Prop>}
     */
    currentCampaignCurrentMapPickupablesPost(prop, callback) {
      let postBody = prop;
      // verify the required parameter 'prop' is set
      if (prop === undefined || prop === null) {
        throw new Error("Missing the required parameter 'prop' when calling currentCampaignCurrentMapPickupablesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json', 'text/plain'];
      let returnType = [Prop];
      return this.apiClient.callApi(
        '/CurrentCampaign/CurrentMap/Pickupables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignCurrentMapSendAllPlayersPost operation.
     * @callback module:api/CurrentCampaignCurrentMapApi~currentCampaignCurrentMapSendAllPlayersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends all players to a map
     * Sends all players to a map if it exists
     * @param {String} mapName The name of the map to retrieve
     * @param {module:api/CurrentCampaignCurrentMapApi~currentCampaignCurrentMapSendAllPlayersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    currentCampaignCurrentMapSendAllPlayersPost(mapName, callback) {
      let postBody = null;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling currentCampaignCurrentMapSendAllPlayersPost");
      }

      let pathParams = {
        'mapName': mapName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/CurrentCampaign/CurrentMap/SendAllPlayers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignCurrentMapTerrainDataGet operation.
     * @callback module:api/CurrentCampaignCurrentMapApi~currentCampaignCurrentMapTerrainDataGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResponseOfTerrainDataPoint} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve terrain data on the current map
     * @param {module:api/CurrentCampaignCurrentMapApi~currentCampaignCurrentMapTerrainDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResponseOfTerrainDataPoint}
     */
    currentCampaignCurrentMapTerrainDataGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = PagedResponseOfTerrainDataPoint;
      return this.apiClient.callApi(
        '/CurrentCampaign/CurrentMap/TerrainData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
