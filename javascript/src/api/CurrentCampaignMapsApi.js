/**
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import MapDataResponse from '../model/MapDataResponse';
import PagedResponseOfProp from '../model/PagedResponseOfProp';
import PagedResponseOfString from '../model/PagedResponseOfString';
import Prop from '../model/Prop';

/**
* CurrentCampaignMaps service.
* @module api/CurrentCampaignMapsApi
* @version 1.0.0
*/
export default class CurrentCampaignMapsApi {

    /**
    * Constructs a new CurrentCampaignMapsApi. 
    * @alias module:api/CurrentCampaignMapsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the currentCampaignMapsGet operation.
     * @callback module:api/CurrentCampaignMapsApi~currentCampaignMapsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResponseOfString} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of map names
     * @param {module:api/CurrentCampaignMapsApi~currentCampaignMapsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResponseOfString}
     */
    currentCampaignMapsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResponseOfString;
      return this.apiClient.callApi(
        '/CurrentCampaign/Maps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignMapsMapNameFilePathGet operation.
     * @callback module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNameFilePathGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve file path of the given map
     * @param {String} mapName The name of the map to get the file path of
     * @param {module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNameFilePathGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    currentCampaignMapsMapNameFilePathGet(mapName, callback) {
      let postBody = null;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNameFilePathGet");
      }

      let pathParams = {
        'mapName': mapName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/CurrentCampaign/Maps/{mapName}/FilePath', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignMapsMapNameGet operation.
     * @callback module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNameGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MapDataResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get map details by name
     * @param {String} mapName The name of the map to retrieve
     * @param {module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MapDataResponse}
     */
    currentCampaignMapsMapNameGet(mapName, callback) {
      let postBody = null;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNameGet");
      }

      let pathParams = {
        'mapName': mapName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = MapDataResponse;
      return this.apiClient.callApi(
        '/CurrentCampaign/Maps/{mapName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignMapsMapNameLoadIntoMemoryPost operation.
     * @callback module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNameLoadIntoMemoryPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load a map into memory
     * Load a map if it exists
     * @param {String} mapName The name of the map to load in to memory
     * @param {module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNameLoadIntoMemoryPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    currentCampaignMapsMapNameLoadIntoMemoryPost(mapName, callback) {
      let postBody = null;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNameLoadIntoMemoryPost");
      }

      let pathParams = {
        'mapName': mapName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/CurrentCampaign/Maps/{mapName}/LoadIntoMemory', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignMapsMapNameOpenPost operation.
     * @callback module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNameOpenPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Load a map
     * Load a map if it exists
     * @param {String} mapName The name of the map to retrieve
     * @param {module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNameOpenPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    currentCampaignMapsMapNameOpenPost(mapName, callback) {
      let postBody = null;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNameOpenPost");
      }

      let pathParams = {
        'mapName': mapName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/CurrentCampaign/Maps/{mapName}/Open', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignMapsMapNamePickupablesGet operation.
     * @callback module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNamePickupablesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PagedResponseOfProp>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get pickupables for a specific map.
     * @param {String} mapName 
     * @param {module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNamePickupablesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PagedResponseOfProp>}
     */
    currentCampaignMapsMapNamePickupablesGet(mapName, callback) {
      let postBody = null;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNamePickupablesGet");
      }

      let pathParams = {
        'mapName': mapName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = [PagedResponseOfProp];
      return this.apiClient.callApi(
        '/CurrentCampaign/Maps/{mapName}/Pickupables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignMapsMapNamePickupablesPost operation.
     * @callback module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNamePickupablesPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Prop>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Pickupables
     * Create new pickupable items for a specific map.
     * @param {String} mapName The name of the map where the pickupables should be created.
     * @param {Array.<module:model/Prop>} prop The collection of pickupable items to create.
     * @param {module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNamePickupablesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Prop>}
     */
    currentCampaignMapsMapNamePickupablesPost(mapName, prop, callback) {
      let postBody = prop;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNamePickupablesPost");
      }
      // verify the required parameter 'prop' is set
      if (prop === undefined || prop === null) {
        throw new Error("Missing the required parameter 'prop' when calling currentCampaignMapsMapNamePickupablesPost");
      }

      let pathParams = {
        'mapName': mapName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [Prop];
      return this.apiClient.callApi(
        '/CurrentCampaign/Maps/{mapName}/Pickupables', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignMapsMapNameSendAllPlayersPost operation.
     * @callback module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNameSendAllPlayersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends all players to a map
     * Sends all players to a map if it exists
     * @param {String} mapName The name of the map to retrieve
     * @param {module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNameSendAllPlayersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    currentCampaignMapsMapNameSendAllPlayersPost(mapName, callback) {
      let postBody = null;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNameSendAllPlayersPost");
      }

      let pathParams = {
        'mapName': mapName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/CurrentCampaign/Maps/{mapName}/SendAllPlayers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the currentCampaignMapsMapNameTerrainDataGet operation.
     * @callback module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNameTerrainDataGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get terrain data for a specific map.
     * @param {String} mapName 
     * @param {module:api/CurrentCampaignMapsApi~currentCampaignMapsMapNameTerrainDataGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    currentCampaignMapsMapNameTerrainDataGet(mapName, callback) {
      let postBody = null;
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling currentCampaignMapsMapNameTerrainDataGet");
      }

      let pathParams = {
        'mapName': mapName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/CurrentCampaign/Maps/{mapName}/TerrainData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
