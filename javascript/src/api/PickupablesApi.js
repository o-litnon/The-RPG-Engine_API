/**
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Animation from '../model/Animation';
import PagedResponseOfAnimations from '../model/PagedResponseOfAnimations';
import PagedResponseOfProp from '../model/PagedResponseOfProp';
import PropTransform from '../model/PropTransform';
import Vector3 from '../model/Vector3';

/**
* Pickupables service.
* @module api/PickupablesApi
* @version 1.0.0
*/
export default class PickupablesApi {

    /**
    * Constructs a new PickupablesApi. 
    * @alias module:api/PickupablesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the pickupablesGet operation.
     * @callback module:api/PickupablesApi~pickupablesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PagedResponseOfProp} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all pickupables
     * @param {module:api/PickupablesApi~pickupablesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PagedResponseOfProp}
     */
    pickupablesGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PagedResponseOfProp;
      return this.apiClient.callApi(
        '/Pickupables', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pickupablesGuidAnimationsGet operation.
     * @callback module:api/PickupablesApi~pickupablesGuidAnimationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PagedResponseOfAnimations>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get animations for a specific pickupable by GUID.
     * @param {String} guid 
     * @param {module:api/PickupablesApi~pickupablesGuidAnimationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PagedResponseOfAnimations>}
     */
    pickupablesGuidAnimationsGet(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling pickupablesGuidAnimationsGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = [PagedResponseOfAnimations];
      return this.apiClient.callApi(
        '/Pickupables/{guid}/Animations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pickupablesGuidAnimationsPut operation.
     * @callback module:api/PickupablesApi~pickupablesGuidAnimationsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Pickupable Animations
     * Update animations for a specific Pickupable object.
     * @param {String} guid The unique identifier of the Pickupable.
     * @param {module:model/Animation} animation Dice roll request
     * @param {module:api/PickupablesApi~pickupablesGuidAnimationsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pickupablesGuidAnimationsPut(guid, animation, callback) {
      let postBody = animation;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling pickupablesGuidAnimationsPut");
      }
      // verify the required parameter 'animation' is set
      if (animation === undefined || animation === null) {
        throw new Error("Missing the required parameter 'animation' when calling pickupablesGuidAnimationsPut");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Pickupables/{guid}/Animations', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pickupablesGuidChatPost operation.
     * @callback module:api/PickupablesApi~pickupablesGuidChatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Pickupable Chat
     * Update chat for a pickupable item.
     * @param {String} guid The GUID of the pickupable.
     * @param {String} body 
     * @param {module:api/PickupablesApi~pickupablesGuidChatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pickupablesGuidChatPost(guid, body, callback) {
      let postBody = body;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling pickupablesGuidChatPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling pickupablesGuidChatPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/text'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Pickupables/{guid}/Chat', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pickupablesGuidDelete operation.
     * @callback module:api/PickupablesApi~pickupablesGuidDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Pickupable
     * Delete a pickupable item by its GUID.
     * @param {String} guid The GUID of the pickupable to delete.
     * @param {module:api/PickupablesApi~pickupablesGuidDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pickupablesGuidDelete(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling pickupablesGuidDelete");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Pickupables/{guid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pickupablesGuidFocusAllPost operation.
     * @callback module:api/PickupablesApi~pickupablesGuidFocusAllPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Focus everyone on the pickupable
     * Focus everyone on the pickupable.
     * @param {String} guid The GUID of the pickupable.
     * @param {module:api/PickupablesApi~pickupablesGuidFocusAllPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pickupablesGuidFocusAllPost(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling pickupablesGuidFocusAllPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Pickupables/{guid}/FocusAll', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pickupablesGuidFocusPost operation.
     * @callback module:api/PickupablesApi~pickupablesGuidFocusPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Focus on the pickupable
     * Focus on the pickupable.
     * @param {String} guid The GUID of the pickupable.
     * @param {module:api/PickupablesApi~pickupablesGuidFocusPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pickupablesGuidFocusPost(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling pickupablesGuidFocusPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Pickupables/{guid}/Focus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pickupablesGuidGet operation.
     * @callback module:api/PickupablesApi~pickupablesGuidGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a specific pickupable by its GUID
     * @param {String} guid The GUID of the pickupable
     * @param {module:api/PickupablesApi~pickupablesGuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    pickupablesGuidGet(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling pickupablesGuidGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Pickupables/{guid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pickupablesGuidMoveToGlobalLocationPost operation.
     * @callback module:api/PickupablesApi~pickupablesGuidMoveToGlobalLocationPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move the pickupable to the target global location
     * @param {String} guid 
     * @param {module:model/Vector3} vector3 Position to move to
     * @param {module:api/PickupablesApi~pickupablesGuidMoveToGlobalLocationPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pickupablesGuidMoveToGlobalLocationPost(guid, vector3, callback) {
      let postBody = vector3;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling pickupablesGuidMoveToGlobalLocationPost");
      }
      // verify the required parameter 'vector3' is set
      if (vector3 === undefined || vector3 === null) {
        throw new Error("Missing the required parameter 'vector3' when calling pickupablesGuidMoveToGlobalLocationPost");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/Pickupables/{guid}/MoveToGlobalLocation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pickupablesGuidTransformGet operation.
     * @callback module:api/PickupablesApi~pickupablesGuidTransformGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropTransform} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Pickupable Transform
     * Retrieve the transform of a specific Pickupable object.
     * @param {String} guid The unique identifier of the Pickupable.
     * @param {module:api/PickupablesApi~pickupablesGuidTransformGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropTransform}
     */
    pickupablesGuidTransformGet(guid, callback) {
      let postBody = null;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling pickupablesGuidTransformGet");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = PropTransform;
      return this.apiClient.callApi(
        '/Pickupables/{guid}/Transform', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pickupablesGuidTransformPut operation.
     * @callback module:api/PickupablesApi~pickupablesGuidTransformPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Pickupable Transform
     * Update the transform of a specific Pickupable object.
     * @param {String} guid The unique identifier of the Pickupable.
     * @param {module:model/PropTransform} propTransform 
     * @param {module:api/PickupablesApi~pickupablesGuidTransformPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pickupablesGuidTransformPut(guid, propTransform, callback) {
      let postBody = propTransform;
      // verify the required parameter 'guid' is set
      if (guid === undefined || guid === null) {
        throw new Error("Missing the required parameter 'guid' when calling pickupablesGuidTransformPut");
      }
      // verify the required parameter 'propTransform' is set
      if (propTransform === undefined || propTransform === null) {
        throw new Error("Missing the required parameter 'propTransform' when calling pickupablesGuidTransformPut");
      }

      let pathParams = {
        'guid': guid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/Pickupables/{guid}/Transform', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
