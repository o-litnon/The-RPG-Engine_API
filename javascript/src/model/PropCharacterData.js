/**
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';

/**
 * The PropCharacterData model module.
 * @module model/PropCharacterData
 * @version 1.0.0
 */
class PropCharacterData {
    /**
     * Constructs a new <code>PropCharacterData</code>.
     * @alias module:model/PropCharacterData
     */
    constructor() { 
        
        PropCharacterData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PropCharacterData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropCharacterData} obj Optional instance to populate.
     * @return {module:model/PropCharacterData} The populated <code>PropCharacterData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropCharacterData();

            if (data.hasOwnProperty('showHelmet')) {
                obj['showHelmet'] = ApiClient.convertToType(data['showHelmet'], 'Boolean');
            }
            if (data.hasOwnProperty('parts')) {
                obj['parts'] = ApiClient.convertToType(data['parts'], ['String']);
            }
            if (data.hasOwnProperty('colors')) {
                obj['colors'] = ApiClient.convertToType(data['colors'], {'String': Color});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropCharacterData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropCharacterData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['parts'])) {
            throw new Error("Expected the field `parts` to be an array in the JSON data but got " + data['parts']);
        }

        return true;
    }


}



/**
 * Whether the helmet is shown
 * @member {Boolean} showHelmet
 */
PropCharacterData.prototype['showHelmet'] = undefined;

/**
 * List of character parts
 * @member {Array.<String>} parts
 */
PropCharacterData.prototype['parts'] = undefined;

/**
 * @member {Object.<String, module:model/Color>} colors
 */
PropCharacterData.prototype['colors'] = undefined;






export default PropCharacterData;

