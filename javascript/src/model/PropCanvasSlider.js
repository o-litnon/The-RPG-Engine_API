/**
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';

/**
 * The PropCanvasSlider model module.
 * @module model/PropCanvasSlider
 * @version 1.0.0
 */
class PropCanvasSlider {
    /**
     * Constructs a new <code>PropCanvasSlider</code>.
     * @alias module:model/PropCanvasSlider
     */
    constructor() { 
        
        PropCanvasSlider.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PropCanvasSlider</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropCanvasSlider} obj Optional instance to populate.
     * @return {module:model/PropCanvasSlider} The populated <code>PropCanvasSlider</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropCanvasSlider();

            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('guid')) {
                obj['guid'] = ApiClient.convertToType(data['guid'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = Color.constructFromObject(data['color']);
            }
            if (data.hasOwnProperty('current')) {
                obj['current'] = ApiClient.convertToType(data['current'], 'Number');
            }
            if (data.hasOwnProperty('max')) {
                obj['max'] = ApiClient.convertToType(data['max'], 'Number');
            }
            if (data.hasOwnProperty('isVisible')) {
                obj['isVisible'] = ApiClient.convertToType(data['isVisible'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropCanvasSlider</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropCanvasSlider</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['guid'] && !(typeof data['guid'] === 'string' || data['guid'] instanceof String)) {
            throw new Error("Expected the field `guid` to be a primitive type in the JSON string but got " + data['guid']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `color`
        if (data['color']) { // data not null
          Color.validateJSON(data['color']);
        }

        return true;
    }


}



/**
 * The version of the canvas slider data
 * @member {Number} version
 */
PropCanvasSlider.prototype['version'] = undefined;

/**
 * A uniquie identifier
 * @member {String} guid
 */
PropCanvasSlider.prototype['guid'] = undefined;

/**
 * The title of the canvas slider
 * @member {String} title
 */
PropCanvasSlider.prototype['title'] = undefined;

/**
 * @member {module:model/Color} color
 */
PropCanvasSlider.prototype['color'] = undefined;

/**
 * The current value of the canvas slider
 * @member {Number} current
 */
PropCanvasSlider.prototype['current'] = undefined;

/**
 * The maximum value of the canvas slider
 * @member {Number} max
 */
PropCanvasSlider.prototype['max'] = undefined;

/**
 * Whether the canvas slider is visible
 * @member {Boolean} isVisible
 */
PropCanvasSlider.prototype['isVisible'] = undefined;






export default PropCanvasSlider;

