/**
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Animation model module.
 * @module model/Animation
 * @version 1.0.0
 */
class Animation {
    /**
     * Constructs a new <code>Animation</code>.
     * @alias module:model/Animation
     */
    constructor() { 
        
        Animation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Animation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Animation} obj Optional instance to populate.
     * @return {module:model/Animation} The populated <code>Animation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Animation();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('boolValue')) {
                obj['boolValue'] = ApiClient.convertToType(data['boolValue'], 'Boolean');
            }
            if (data.hasOwnProperty('intValue')) {
                obj['intValue'] = ApiClient.convertToType(data['intValue'], 'Number');
            }
            if (data.hasOwnProperty('floatValue')) {
                obj['floatValue'] = ApiClient.convertToType(data['floatValue'], 'Number');
            }
            if (data.hasOwnProperty('stringValue')) {
                obj['stringValue'] = ApiClient.convertToType(data['stringValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Animation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Animation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['stringValue'] && !(typeof data['stringValue'] === 'string' || data['stringValue'] instanceof String)) {
            throw new Error("Expected the field `stringValue` to be a primitive type in the JSON string but got " + data['stringValue']);
        }

        return true;
    }


}



/**
 * @member {String} name
 */
Animation.prototype['name'] = undefined;

/**
 * @member {String} type
 */
Animation.prototype['type'] = undefined;

/**
 * @member {Boolean} boolValue
 */
Animation.prototype['boolValue'] = undefined;

/**
 * @member {Number} intValue
 */
Animation.prototype['intValue'] = undefined;

/**
 * @member {Number} floatValue
 */
Animation.prototype['floatValue'] = undefined;

/**
 * @member {String} stringValue
 */
Animation.prototype['stringValue'] = undefined;






export default Animation;

