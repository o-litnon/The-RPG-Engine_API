/**
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Vector3 from './Vector3';

/**
 * The PropNavPaths model module.
 * @module model/PropNavPaths
 * @version 1.0.0
 */
class PropNavPaths {
    /**
     * Constructs a new <code>PropNavPaths</code>.
     * A class for storing navigation paths for a Prop
     * @alias module:model/PropNavPaths
     */
    constructor() { 
        
        PropNavPaths.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PropNavPaths</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropNavPaths} obj Optional instance to populate.
     * @return {module:model/PropNavPaths} The populated <code>PropNavPaths</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropNavPaths();

            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('patrolPoints')) {
                obj['patrolPoints'] = ApiClient.convertToType(data['patrolPoints'], [Vector3]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropNavPaths</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropNavPaths</code>.
     */
    static validateJSON(data) {
        if (data['patrolPoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['patrolPoints'])) {
                throw new Error("Expected the field `patrolPoints` to be an array in the JSON data but got " + data['patrolPoints']);
            }
            // validate the optional field `patrolPoints` (array)
            for (const item of data['patrolPoints']) {
                Vector3.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The version of the PropNavPaths
 * @member {Number} version
 * @default 1
 */
PropNavPaths.prototype['version'] = 1;

/**
 * A list of patrol points represented as Vector3 objects
 * @member {Array.<module:model/Vector3>} patrolPoints
 */
PropNavPaths.prototype['patrolPoints'] = undefined;






export default PropNavPaths;

