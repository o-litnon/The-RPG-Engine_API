/**
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';
import Vector2 from './Vector2';

/**
 * The Atmosphere model module.
 * @module model/Atmosphere
 * @version 1.0.0
 */
class Atmosphere {
    /**
     * Constructs a new <code>Atmosphere</code>.
     * @alias module:model/Atmosphere
     */
    constructor() { 
        
        Atmosphere.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Atmosphere</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Atmosphere} obj Optional instance to populate.
     * @return {module:model/Atmosphere} The populated <code>Atmosphere</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Atmosphere();

            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('lightRotation')) {
                obj['lightRotation'] = Vector2.constructFromObject(data['lightRotation']);
            }
            if (data.hasOwnProperty('lightColour')) {
                obj['lightColour'] = Color.constructFromObject(data['lightColour']);
            }
            if (data.hasOwnProperty('ambientColor')) {
                obj['ambientColor'] = Color.constructFromObject(data['ambientColor']);
            }
            if (data.hasOwnProperty('enableFog')) {
                obj['enableFog'] = ApiClient.convertToType(data['enableFog'], 'Boolean');
            }
            if (data.hasOwnProperty('fogColour')) {
                obj['fogColour'] = Color.constructFromObject(data['fogColour']);
            }
            if (data.hasOwnProperty('fogDensity')) {
                obj['fogDensity'] = ApiClient.convertToType(data['fogDensity'], 'Number');
            }
            if (data.hasOwnProperty('fogHeight')) {
                obj['fogHeight'] = ApiClient.convertToType(data['fogHeight'], 'Number');
            }
            if (data.hasOwnProperty('clouds')) {
                obj['clouds'] = ApiClient.convertToType(data['clouds'], 'Boolean');
            }
            if (data.hasOwnProperty('abyss')) {
                obj['abyss'] = ApiClient.convertToType(data['abyss'], 'Boolean');
            }
            if (data.hasOwnProperty('table')) {
                obj['table'] = ApiClient.convertToType(data['table'], 'Boolean');
            }
            if (data.hasOwnProperty('tableColor')) {
                obj['tableColor'] = Color.constructFromObject(data['tableColor']);
            }
            if (data.hasOwnProperty('skybox')) {
                obj['skybox'] = ApiClient.convertToType(data['skybox'], 'String');
            }
            if (data.hasOwnProperty('rainAmount')) {
                obj['rainAmount'] = ApiClient.convertToType(data['rainAmount'], 'Number');
            }
            if (data.hasOwnProperty('snowAmount')) {
                obj['snowAmount'] = ApiClient.convertToType(data['snowAmount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Atmosphere</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Atmosphere</code>.
     */
    static validateJSON(data) {
        // validate the optional field `lightRotation`
        if (data['lightRotation']) { // data not null
          Vector2.validateJSON(data['lightRotation']);
        }
        // validate the optional field `lightColour`
        if (data['lightColour']) { // data not null
          Color.validateJSON(data['lightColour']);
        }
        // validate the optional field `ambientColor`
        if (data['ambientColor']) { // data not null
          Color.validateJSON(data['ambientColor']);
        }
        // validate the optional field `fogColour`
        if (data['fogColour']) { // data not null
          Color.validateJSON(data['fogColour']);
        }
        // validate the optional field `tableColor`
        if (data['tableColor']) { // data not null
          Color.validateJSON(data['tableColor']);
        }
        // ensure the json data is a string
        if (data['skybox'] && !(typeof data['skybox'] === 'string' || data['skybox'] instanceof String)) {
            throw new Error("Expected the field `skybox` to be a primitive type in the JSON string but got " + data['skybox']);
        }

        return true;
    }


}



/**
 * The version of the atmosphere data
 * @member {Number} version
 */
Atmosphere.prototype['version'] = undefined;

/**
 * @member {module:model/Vector2} lightRotation
 */
Atmosphere.prototype['lightRotation'] = undefined;

/**
 * @member {module:model/Color} lightColour
 */
Atmosphere.prototype['lightColour'] = undefined;

/**
 * @member {module:model/Color} ambientColor
 */
Atmosphere.prototype['ambientColor'] = undefined;

/**
 * Whether fog is enabled
 * @member {Boolean} enableFog
 */
Atmosphere.prototype['enableFog'] = undefined;

/**
 * @member {module:model/Color} fogColour
 */
Atmosphere.prototype['fogColour'] = undefined;

/**
 * Fog density
 * @member {Number} fogDensity
 */
Atmosphere.prototype['fogDensity'] = undefined;

/**
 * Fog height
 * @member {Number} fogHeight
 */
Atmosphere.prototype['fogHeight'] = undefined;

/**
 * Whether clouds are enabled
 * @member {Boolean} clouds
 */
Atmosphere.prototype['clouds'] = undefined;

/**
 * Whether abyss is enabled
 * @member {Boolean} abyss
 */
Atmosphere.prototype['abyss'] = undefined;

/**
 * Whether table is enabled
 * @member {Boolean} table
 */
Atmosphere.prototype['table'] = undefined;

/**
 * @member {module:model/Color} tableColor
 */
Atmosphere.prototype['tableColor'] = undefined;

/**
 * Skybox image name
 * @member {String} skybox
 */
Atmosphere.prototype['skybox'] = undefined;

/**
 * Rain amount
 * @member {Number} rainAmount
 */
Atmosphere.prototype['rainAmount'] = undefined;

/**
 * Snow amount
 * @member {Number} snowAmount
 */
Atmosphere.prototype['snowAmount'] = undefined;






export default Atmosphere;

