/**
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';

/**
 * The Settings model module.
 * @module model/Settings
 * @version 1.0.0
 */
class Settings {
    /**
     * Constructs a new <code>Settings</code>.
     * @alias module:model/Settings
     */
    constructor() { 
        
        Settings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Settings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Settings} obj Optional instance to populate.
     * @return {module:model/Settings} The populated <code>Settings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Settings();

            if (data.hasOwnProperty('showGrid')) {
                obj['showGrid'] = ApiClient.convertToType(data['showGrid'], 'Boolean');
            }
            if (data.hasOwnProperty('gridSize')) {
                obj['gridSize'] = ApiClient.convertToType(data['gridSize'], 'Number');
            }
            if (data.hasOwnProperty('lineWidth')) {
                obj['lineWidth'] = ApiClient.convertToType(data['lineWidth'], 'Number');
            }
            if (data.hasOwnProperty('gridColor')) {
                obj['gridColor'] = Color.constructFromObject(data['gridColor']);
            }
            if (data.hasOwnProperty('gridType')) {
                obj['gridType'] = ApiClient.convertToType(data['gridType'], 'Number');
            }
            if (data.hasOwnProperty('unitMultiplier')) {
                obj['unitMultiplier'] = ApiClient.convertToType(data['unitMultiplier'], 'Number');
            }
            if (data.hasOwnProperty('roundRulers')) {
                obj['roundRulers'] = ApiClient.convertToType(data['roundRulers'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Settings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Settings</code>.
     */
    static validateJSON(data) {
        // validate the optional field `gridColor`
        if (data['gridColor']) { // data not null
          Color.validateJSON(data['gridColor']);
        }

        return true;
    }


}



/**
 * Whether to show the grid
 * @member {Boolean} showGrid
 */
Settings.prototype['showGrid'] = undefined;

/**
 * Grid size
 * @member {Number} gridSize
 */
Settings.prototype['gridSize'] = undefined;

/**
 * Line width
 * @member {Number} lineWidth
 */
Settings.prototype['lineWidth'] = undefined;

/**
 * @member {module:model/Color} gridColor
 */
Settings.prototype['gridColor'] = undefined;

/**
 * Grid type
 * @member {Number} gridType
 */
Settings.prototype['gridType'] = undefined;

/**
 * Unit multiplier
 * @member {Number} unitMultiplier
 */
Settings.prototype['unitMultiplier'] = undefined;

/**
 * Whether to round rulers
 * @member {Boolean} roundRulers
 */
Settings.prototype['roundRulers'] = undefined;






export default Settings;

