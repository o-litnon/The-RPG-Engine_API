/**
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Color from './Color';
import Vector3Int from './Vector3Int';

/**
 * The TerrainData model module.
 * @module model/TerrainData
 * @version 1.0.0
 */
class TerrainData {
    /**
     * Constructs a new <code>TerrainData</code>.
     * @alias module:model/TerrainData
     * @param size {module:model/Vector3Int} 
     */
    constructor(size) { 
        
        TerrainData.initialize(this, size);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, size) { 
        obj['size'] = size;
    }

    /**
     * Constructs a <code>TerrainData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TerrainData} obj Optional instance to populate.
     * @return {module:model/TerrainData} The populated <code>TerrainData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TerrainData();

            if (data.hasOwnProperty('extendNavOverEdge')) {
                obj['extendNavOverEdge'] = ApiClient.convertToType(data['extendNavOverEdge'], 'Number');
            }
            if (data.hasOwnProperty('isSculptable')) {
                obj['isSculptable'] = ApiClient.convertToType(data['isSculptable'], 'Boolean');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = Vector3Int.constructFromObject(data['size']);
            }
            if (data.hasOwnProperty('baseHeight')) {
                obj['baseHeight'] = ApiClient.convertToType(data['baseHeight'], 'Number');
            }
            if (data.hasOwnProperty('baseColor')) {
                obj['baseColor'] = Color.constructFromObject(data['baseColor']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TerrainData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TerrainData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TerrainData.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `size`
        if (data['size']) { // data not null
          Vector3Int.validateJSON(data['size']);
        }
        // validate the optional field `baseColor`
        if (data['baseColor']) { // data not null
          Color.validateJSON(data['baseColor']);
        }

        return true;
    }


}

TerrainData.RequiredProperties = ["size"];

/**
 * The constant value for extending navigation over the edge
 * @member {Number} extendNavOverEdge
 */
TerrainData.prototype['extendNavOverEdge'] = undefined;

/**
 * Whether the terrain is sculptable
 * @member {Boolean} isSculptable
 */
TerrainData.prototype['isSculptable'] = undefined;

/**
 * @member {module:model/Vector3Int} size
 */
TerrainData.prototype['size'] = undefined;

/**
 * The base height of the terrain
 * @member {Number} baseHeight
 */
TerrainData.prototype['baseHeight'] = undefined;

/**
 * @member {module:model/Color} baseColor
 */
TerrainData.prototype['baseColor'] = undefined;






export default TerrainData;

