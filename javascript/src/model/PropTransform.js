/**
 * The RPG Engine API
 * Requires The RPG Engine to be running locally.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Quaternion from './Quaternion';
import Vector3 from './Vector3';

/**
 * The PropTransform model module.
 * @module model/PropTransform
 * @version 1.0.0
 */
class PropTransform {
    /**
     * Constructs a new <code>PropTransform</code>.
     * @alias module:model/PropTransform
     */
    constructor() { 
        
        PropTransform.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PropTransform</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PropTransform} obj Optional instance to populate.
     * @return {module:model/PropTransform} The populated <code>PropTransform</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PropTransform();

            if (data.hasOwnProperty('position')) {
                obj['position'] = Vector3.constructFromObject(data['position']);
            }
            if (data.hasOwnProperty('rotation')) {
                obj['rotation'] = Quaternion.constructFromObject(data['rotation']);
            }
            if (data.hasOwnProperty('scale')) {
                obj['scale'] = Vector3.constructFromObject(data['scale']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PropTransform</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PropTransform</code>.
     */
    static validateJSON(data) {
        // validate the optional field `position`
        if (data['position']) { // data not null
          Vector3.validateJSON(data['position']);
        }
        // validate the optional field `rotation`
        if (data['rotation']) { // data not null
          Quaternion.validateJSON(data['rotation']);
        }
        // validate the optional field `scale`
        if (data['scale']) { // data not null
          Vector3.validateJSON(data['scale']);
        }

        return true;
    }


}



/**
 * @member {module:model/Vector3} position
 */
PropTransform.prototype['position'] = undefined;

/**
 * @member {module:model/Quaternion} rotation
 */
PropTransform.prototype['rotation'] = undefined;

/**
 * @member {module:model/Vector3} scale
 */
PropTransform.prototype['scale'] = undefined;






export default PropTransform;

